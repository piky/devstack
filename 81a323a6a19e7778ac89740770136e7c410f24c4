{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3fa7e38b_6481ff4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 8556
      },
      "writtenOn": "2019-10-17T23:27:35Z",
      "side": 1,
      "message": "this is not to create the networks actually, it is only used to skip to set the public_network_id which is used for external connectivity in tests.\n\nshared network creation is added in this same condition just to make sure that tempest works fine if there is a shared network exist in env.",
      "range": {
        "startLine": 7,
        "startChar": 5,
        "endLine": 7,
        "endChar": 30
      },
      "revId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fa7e38b_84ebdb10",
        "filename": "lib/tempest",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 8556
      },
      "writtenOn": "2019-10-17T23:27:35Z",
      "side": 1,
      "message": "this change basically will handle below two use case-\n\n1. NEUTRON_CREATE_INITIAL_NETWORKS is true when neutron create initial network but you want to skip setting the public_network_id\n- Not sure why we need to skip public_network_id and so does tempest tests external connectivity checks also.\n\n2. NEUTRON_CREATE_INITIAL_NETWORKS is false where there is no network created by neutron but we do have neutron\u0027s public network available in env ? \n- This seems valid case.\n\nlet me know if my understanding is correct?",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 256,
        "endChar": 50
      },
      "revId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fa7e38b_20f8f379",
        "filename": "lib/tempest",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 11655
      },
      "writtenOn": "2019-12-12T18:23:03Z",
      "side": 1,
      "message": "So I guess the case that makes sense is that some test scenarios and environments may have certian constraints, like in reality may be pure private IaaS configurations where there is no real \"public\" network?",
      "parentUuid": "3fa7e38b_84ebdb10",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 256,
        "endChar": 50
      },
      "revId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff570b3c_33c74615",
        "filename": "lib/tempest",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 11655
      },
      "writtenOn": "2020-05-28T13:16:38Z",
      "side": 1,
      "message": "I guess it occurred to me, some operators don\u0027t actually to have \"public networks\", and to force a hard constraint on them is actually making openstack harder to use. Harder to fit into a production environment.",
      "parentUuid": "3fa7e38b_20f8f379",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 256,
        "endChar": 50
      },
      "revId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Code reviewed by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Priority",
        "description": {
          "value": "Review priority"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Review-Priority\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Review-Priority=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Review-Priority=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Verified in gate by CI"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Workflow",
        "description": {
          "value": "Approved for gate by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Workflow\u003dMAX AND -label:Workflow\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Workflow=MAX AND -label:Workflow=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Workflow=MAX","label:Workflow=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "81a323a6a19e7778ac89740770136e7c410f24c4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}