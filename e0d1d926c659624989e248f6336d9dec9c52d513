{
  "comments": [
    {
      "key": {
        "uuid": "AAAALH//k2A\u003d",
        "filename": "lib/quantum",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1689
      },
      "writtenOn": "2012-08-30T00:11:36Z",
      "side": 1,
      "message": "Always deleting and re-creating the bridge means it cannot have a physical interface as a port providing network connectivity. It also means the host cannot have an IP address on the bridge. Network connectivity would seem to be needed for the L3 agent, as well as for the openvswitch agent that would otherwise use this function to create its bridge (or it might use the same bridge as the L3 agent). Why not just pass --may-exist to the ovs-vsctl add-br command?",
      "revId": "e0d1d926c659624989e248f6336d9dec9c52d513",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAALH//k1s\u003d",
        "filename": "lib/quantum",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 4395
      },
      "writtenOn": "2012-08-30T00:21:27Z",
      "side": 1,
      "message": "I think the reason why it deletes it is because it gets you back to a fresh setup. Alternately we could do ovs-vsctl list-ports and remove the ports (and not HOST_IP_IFACE if it is attached to that bridge).",
      "parentUuid": "AAAALH//k2A\u003d",
      "revId": "e0d1d926c659624989e248f6336d9dec9c52d513",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAALH//kwY\u003d",
        "filename": "lib/quantum",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1689
      },
      "writtenOn": "2012-08-30T03:16:28Z",
      "side": 1,
      "message": "I like the idea of removing left-over ports from previous runs. But we need to be careful not to disrupt the host\u0027s network configuration, especially if this bridge contains the only network interface. I\u0027d prefer we only delete ports that match name prefixes that quantum would be responsible for. We could remove those matching tap* for now, and I\u0027d add those matching phy* and int* for the veth used in the provider patch.",
      "parentUuid": "AAAALH//k1s\u003d",
      "revId": "e0d1d926c659624989e248f6336d9dec9c52d513",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAALH//kbw\u003d",
        "filename": "lib/quantum",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 261
      },
      "writtenOn": "2012-08-30T15:21:34Z",
      "side": 1,
      "message": "I am addressing Bob\u0027s comment in the following way:\n- the external network is created by devstack, as well as a subnet on it. The default gateway for that subnet would become the default way for NATed quantum networks.\n- you can always specify a physical interface (the one that will drive your vm\u0027s packet to the internet), devstack already has a parameter for this that you can configure with localrc\n- The external bridge however is likely to become cluttered with ports belonging to floating ips. It makes sense clearing it up at each run of stack.sh (I think we had a good reason for not doing the cleanup in unstack.sh)\n- assign the gateway IP address of the external subnet to the bridge itself. \nThis alone would give a simple environment to test NAT, although one can ping the gateway only.\n- When a physical network is specified we will attach the interface to the external OVS/LB\n- IP the physical interface has an IP, those IP will be removed from the physical interface and assigned to the external bridge; original addresses will be restored by unstack.sh; It seems the host loses connectivity as soon as it is plugged into the bridge when the chosen physical interface is its default gateway (this probably happens with ovs only)",
      "parentUuid": "AAAALH//kwY\u003d",
      "revId": "e0d1d926c659624989e248f6336d9dec9c52d513",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}