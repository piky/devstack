{
  "comments": [
    {
      "key": {
        "uuid": "baa201ad_5cbc136d",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 4656
      },
      "writtenOn": "2014-09-29T18:31:39Z",
      "side": 1,
      "message": "This is not a sane default. If you are going to allocate from the ULA block, we need to actually generate some randomness to create a prefix.\n\nIn this case, perhaps just using the documentation prefix specified in RFC3849 is in order?",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_375f6810",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 9411
      },
      "writtenOn": "2014-09-29T18:40:58Z",
      "side": 1,
      "message": "Please don\u0027t use the Doc space.  I\u0027d strongly suggest NOT defaulting a ULA prefix, but generating one for each subnet.  If a tenant links two networks by putting a VM on both, they need to be unique.",
      "parentUuid": "baa201ad_5cbc136d",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_572cec4a",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 6685
      },
      "writtenOn": "2014-09-29T18:49:07Z",
      "side": 1,
      "message": "This script creates a single ipv6 subnet as it does for ipv4. The user can set this variables in local.conf or localrc. Is there a problem with this default?",
      "parentUuid": "baa201ad_375f6810",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_a173084c",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 6635
      },
      "writtenOn": "2014-09-30T10:07:50Z",
      "side": 1,
      "message": "Only one private IPv6 subnet will be created by this script, just as with IPv4. Neutron will not allow the creation of two subnets with the same prefix so I don\u0027t see the issue here. Could you please elaborate?",
      "parentUuid": "baa201ad_375f6810",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_473c2930",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 9411
      },
      "writtenOn": "2014-09-30T13:45:20Z",
      "side": 1,
      "message": "I went back and reread RFC 4193.  While it never says \"MUST\", I interpret the RFC as stating that setting the pseudo-random 40-bit identifier is non-optional since it\u0027s part of the address definition.  I was unaware that neutron would prevent the reuse of address space.  In fact, I just confirmed that I can set the same IPv4 subnet all over and it won\u0027t give any errors, even within the same tenant, so long as the subnets are on different neutron networks. The scenario I was considering is joining multiple neutron networks to the same VM.  While it\u0027s difficult to prevent this in IPv4, I think we should strive to do it in IPv6 to make it as seamless as we can.  As to my comment on not using the documentation space, RFC 3849 states in the Operational Considerations section that filters should be in place locally as well as globally, making deployment of a doc space inherently broken in any kind of production code.\n\nTo conclude: We should randomize the 40-bit identifier section of a ULA address per-network.",
      "parentUuid": "baa201ad_a173084c",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_02f92fe9",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 6635
      },
      "writtenOn": "2014-09-30T14:00:10Z",
      "side": 1,
      "message": "If that\u0027s the case then that sounds like a feature we\u0027d want to include in neutron itself, rather than anywhere that calls to neutron are made - here, horizon, python-client, etc.",
      "parentUuid": "baa201ad_473c2930",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_dd7c6875",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 4656
      },
      "writtenOn": "2014-09-30T14:28:31Z",
      "side": 1,
      "message": "Regarding using the documentation space, yes upon review that is an incorrect suggestion.\n\nI disagree with the conclusion that it should be a feature in neutron to randomize. If we are going to use the ULA space, we should pull some randomness from /dev/random via dd and then run it through hexdump to format.",
      "parentUuid": "baa201ad_02f92fe9",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_b2ad0a8b",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 93,
      "author": {
        "id": 6635
      },
      "writtenOn": "2014-09-30T18:02:35Z",
      "side": 1,
      "message": "As discussed in the IPv6 meeting I\u0027ll update this to use a randomized Global ID as per RFC 4193.",
      "parentUuid": "baa201ad_dd7c6875",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_4427c064",
        "filename": "lib/neutron",
        "patchSetId": 36
      },
      "lineNbr": 1138,
      "author": {
        "id": 1131
      },
      "writtenOn": "2014-09-30T16:47:38Z",
      "side": 1,
      "message": "This code doesn\u0027t play well with DVR, since if Q_DVR_MODE \u003d dvr_snat the qg- interface won\u0027t be in the qrouter namespace, but in the snat namespace.  I might have a quick workaround you can put here to at least make things work, am testing out now and will let you know.",
      "revId": "ed048966ae3c9636f5b94d0ead925112efe9fa4f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}