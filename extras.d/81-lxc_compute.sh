### Start computes inside LXC container
#
# To use this script,
# * set LXC_COMPUTE=n in your local.conf
#   n is the number of containers you want to start.
# * configure the local.conf of your containers
#   by default this file should be named compute-local.conf
#   on the devstack directory (see COMPUTE_LOCALCONF)
# * LXC_RECLONE allows to create/destroy the containers or
#   just start/stop them
# * read and adjust to your environment the following variables
#
###

### sources global variables
source $TOP_DIR/.localrc.auto

### Variables
LXC_COMPUTE=${LXC_COMPUTE:="0"}
LXC_BASE_COMPUTE_NAME="devstack"
LXC_COMPUTE_NAMES_FILE="/tmp/lxc_compute_names"
LXC_SSH_KEY="/tmp/key"
COMPUTE_LOCALCONF=${COMPUTE_LOCALCONF:="compute-local.conf"}
LXC_ETH0_LINK=${LXC_ETH0_LINK:="lxcbr0"}
LXC_ETH1_LINK=${LXC_ETH0_LINK:="lxcbr0"}
LXC_ETH0_RANGE=${LXC_ETH0_RANGE:="10.0.3.2:10.0.3.254"}
LXC_ETH0_MASK=${LXC_ETH0_MASK:="255.255.255.0"}
LXC_ETH0_GW=${LXC_ETH0_GW:="10.0.3.1"} #You should ensure that the GW is not in the range provided in LXC_ETH0_RANGE
LXC_RECLONE=$(trueorfalse True $LXC_RECLONE) #Use "True" if you want to reclone your lxc computes (./stack.sh creates lxc containers and ./unstack.sh destroys them). "False" allows to use already created containers.

### checks if LXC containers have to be created
if [[ "$1" == "stack" && "$2" == "extra" && "$LXC_COMPUTE" -gt 0 ]]; then
	if [[ "$LXC_COMPUTE" == 1 ]]; then
		echo_summary "### LXC_COMPUTE is set --> $LXC_COMPUTE compute has to be created"
	else
		echo_summary "### LXC_COMPUTE is set --> $LXC_COMPUTE computes have to be created"
	fi

	# check the range of the IPs for the LXC containers
	first_addr=${LXC_ETH0_RANGE%:*}
	last_addr=${LXC_ETH0_RANGE#*:}
	subnet1=${first_addr%.*}
	subnet2=${last_addr%.*}
	ip=${first_addr##*.}
	if [[ $subnet1 != $subnet2 ]]; then
		last_addr="$subnet1.254"
		nb_ip_in_range=$((254-$ip))
		if [[ $LXC_COMPUTE -gt $nb_ip_in_range ]]; then
			LXC_COMPUTE=$nb_ip_in_range
		fi
		echo "*** Sorry, this script is not able to work with different subnets. Will continue with LXC_ETH0_RANGE=$first_addr:$subnet1.254 and LXC_COMPUTE=$LXC_COMPUTE"
	fi

	if [[ $LXC_RECLONE == "True" ]]; then
		### in case of RECLONE=False, their is no need to install and configure LXC containers (it was already done)
		echo_summary "*** install lxc"
		apt_get update
		apt_get install lxc

		echo_summary "*** create an LXC template for computes"
		sudo lxc-create -t ubuntu -n $LXC_BASE_COMPUTE_NAME"1"
		if [[ $? != 0 ]]; then
			echo_summary "error: lxc-create"
			echo_summary "terminate this script now"
			exit 1
		fi
		echo $LXC_BASE_COMPUTE_NAME"1" > $LXC_COMPUTE_NAMES_FILE

		echo_summary "*** configure the first LXC compute"
	
		# configure network interfaces of the LXC container #1
		### configure eth0
		cat > /tmp/interfaces << EOF
# This file was generated by devstack.

# The loopback network interface
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
	address $first_addr
	netmask $LXC_ETH0_MASK
	gateway $LXC_ETH0_GW
EOF
		sudo cp /tmp/interfaces /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/etc/network/interfaces

		### configure eth1: add eth1 to lxc container config file
		sudo bash -c "echo \"\" >> /var/lib/lxc/$LXC_BASE_COMPUTE_NAME\"1\"/config"
		sudo bash -c "echo \"### add eth1 for the network of the VMs\" >> /var/lib/lxc/$LXC_BASE_COMPUTE_NAME\"1\"/config"
		sudo bash -c "echo \"lxc.network.type=veth\" >> /var/lib/lxc/$LXC_BASE_COMPUTE_NAME\"1\"/config"
		sudo bash -c "echo \"lxc.network.link=lxcbr1\" >> /var/lib/lxc/$LXC_BASE_COMPUTE_NAME\"1\"/config"
		sudo bash -c "echo \"lxc.network.flags=up\" >> /var/lib/lxc/$LXC_BASE_COMPUTE_NAME\"1\"/config"

		# configure dns of the LXC container #1
		sudo mv /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/etc/resolv.conf /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/etc/resolv.conf-ori
		sudo cp /etc/resolv.conf /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/etc/

		# configure ssh of the LXC container #1
		ssh-keygen -N "" -f $LXC_SSH_KEY
		sudo mkdir /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/home/ubuntu/.ssh
		sudo cp /tmp/key.pub /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/home/ubuntu/.ssh/authorized_keys
	fi #end RECLONE test

	# start container #1
	sudo lxc-start -n $LXC_BASE_COMPUTE_NAME"1" -d
	echo_summary "waiting for the container to start: sleep 5s"
	sleep 5

	#install and configure devstack inside the LXC container
	if [[ $LXC_RECLONE == "True" ]]; then
		### add NOPASSWD for sudo users
		sudo chroot /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs sed -i 's/sudo\tALL=(ALL:ALL) ALL/sudo\tALL=(ALL:ALL) NOPASSWD:ALL/' /etc/sudoers
		
		### install some packages needed by n-cpu
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sudo http_proxy=$http_proxy https_proxy=$https_proxy apt-get update
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sudo http_proxy=$http_proxy https_proxy=$https_proxy apt-get --assume-yes install git python-dev curl screen bc libxslt1-dev libffi-dev python-pip
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sudo http_proxy=$http_proxy https_proxy=$https_proxy pip install distribute --upgrade
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sudo http_proxy=$http_proxy https_proxy=$https_proxy pip install cryptography

		### install and configure devstack
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr http_proxy=$http_proxy https_proxy=$https_proxy git clone https://github.com/openstack-dev/devstack.git
		sudo cp $TOP_DIR/$COMPUTE_LOCALCONF /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/home/ubuntu/devstack/local.conf
		sudo mkdir -p /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/opt/stack/
		sudo rsync -a /opt/stack/ /var/lib/lxc/$LXC_BASE_COMPUTE_NAME"1"/rootfs/opt/stack/ --exclude data
		
		### do not install open-iscsi on the lxc containers
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sed 's/open-iscsi-utils//' /home/ubuntu/devstack/files/apts/n-cpu -i
		ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr sed 's/open-iscsi//' /home/ubuntu/devstack/files/apts/n-cpu -i
	fi #end test RECLONE

	### stack!
	ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$first_addr http_proxy=$http_proxy https_proxy=$https_proxy /home/ubuntu/devstack/stack.sh

	# LXC cloning
	if [[ "$LXC_COMPUTE" -gt 1 ]]; then
		echo_summary "*** clone the first compute"
		for i in `seq 2 $LXC_COMPUTE`; do
			echo_summary "clone #$i"
			sudo lxc-clone -o $LXC_BASE_COMPUTE_NAME"1" -n $LXC_BASE_COMPUTE_NAME$i
			sudo chroot /var/lib/lxc/$LXC_BASE_COMPUTE_NAME$i/rootfs sed -i "s/address $first_addr/address $subnet1.$(($i+1))/" /etc/network/interfaces
			sudo lxc-start -d -n $LXC_BASE_COMPUTE_NAME$i
			echo $LXC_BASE_COMPUTE_NAME$i >> $LXC_COMPUTE_NAMES_FILE
			echo_summary "waiting for the container to start: sleep 5s"
			sleep 5

			### stack!
			ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@$subnet1.$(($i+1)) http_proxy=$http_proxy https_proxy=$https_proxy /home/ubuntu/devstack/stack.sh
		done
	fi
fi

if [[ "$1" == "unstack" && "$LXC_COMPUTE" -gt 0 ]]; then
	if [[ $LXC_RECLONE == "False" ]]; then
		### do not destroy LXC containers
		while read lxc_name; do
			echo "stopping $lxc_name"
			sudo lxc-stop -n $lxc_name
		done < $LXC_COMPUTE_NAMES_FILE

	else
		### destroy LXC containers
		while read lxc_name; do
			echo "destroying $lxc_name"
			sudo lxc-stop -n $lxc_name
			sudo lxc-destroy -n $lxc_name
		done < $LXC_COMPUTE_NAMES_FILE
		rm $LXC_COMPUTE_NAMES_FILE
		rm $LXC_SSH_KEY $LXC_SSH_KEY.pub
	fi
fi
