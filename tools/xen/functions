#!/bin/bash

function xapi_plugin_location {
    for PLUGIN_DIR in "/etc/xapi.d/plugins/" "/usr/lib/xcp/plugins/" "/usr/lib/xapi/plugins"; do
        if [ -d $PLUGIN_DIR ]; then
            echo $PLUGIN_DIR
            return 0
        fi
    done
    return 1
}

function zip_snapshot_location {
    echo $1 | sed "s:\.git$::;s:$:/zipball/$2:g"
}

function create_directory_for_kernels {
    if [ -d "/boot/guest" ]; then
        echo "INFO: /boot/guest directory already exists, using that" >&2
    else
        local LOCALPATH="$(get_local_sr_path)/os-guest-kernels"
        mkdir -p $LOCALPATH
        ln -s $LOCALPATH /boot/guest
    fi
}

function create_directory_for_images {
    if [ -d "/images" ]; then
        echo "INFO: /images directory already exists, using that" >&2
    else
        local LOCALPATH="$(get_local_sr_path)/os-images"
        mkdir -p $LOCALPATH
        ln -s $LOCALPATH /images
    fi
}

function extract_remote_zipball {
    local ZIPBALL_URL=$1

    local LOCAL_ZIPBALL=$(mktemp)
    local EXTRACTED_FILES=$(mktemp -d)

    (
        wget -nv $ZIPBALL_URL -O $LOCAL_ZIPBALL --no-check-certificate
        unzip -q -o $LOCAL_ZIPBALL -d $EXTRACTED_FILES
        rm -f $LOCAL_ZIPBALL
    ) >&2

    echo "$EXTRACTED_FILES"
}

function find_xapi_plugins_dir {
    find $1 -path '*/xapi.d/plugins' -type d -print
}

function install_xapi_plugins_from_zipball {
    local XAPI_PLUGIN_DIR
    local EXTRACTED_FILES
    local EXTRACTED_PLUGINS_DIR

    XAPI_PLUGIN_DIR=$(xapi_plugin_location)

    EXTRACTED_FILES=$(extract_remote_zipball $1)
    EXTRACTED_PLUGINS_DIR=$(find_xapi_plugins_dir $EXTRACTED_FILES)

    cp -pr $EXTRACTED_PLUGINS_DIR/* $XAPI_PLUGIN_DIR
    rm -rf $EXTRACTED_FILES
    chmod a+x ${XAPI_PLUGIN_DIR}*
}

function get_local_sr {
    xe sr-list name-label="Local storage" --minimal
}

function get_local_sr_path {
    echo "/var/run/sr-mount/$(get_local_sr)"
}

function find_ip_by_name() {
    local guest_name="$1"
    local interface="$2"

    local period=10
    local max_tries=10
    local i=0

    while true; do
        if [ $i -ge $max_tries ]; then
            echo "Timeout: ip address for interface $interface of $guest_name"
            exit 11
        fi

        ipaddress=$(xe vm-list --minimal \
                    name-label=$guest_name \
                    params=networks | sed -ne "s,^.*${interface}/ip: \([0-9.]*\).*\$,\1,p")

        if [ -z "$ipaddress" ]; then
            sleep $period
            ((i++))
        else
            echo $ipaddress
            break
        fi
    done
}

function _vm_uuid() {
    local vm_name_label

    vm_name_label="$1"

    xe vm-list name-label="$vm_name_label" --minimal
}

function _create_new_network() {
    local name_label
    name_label=$1

    xe network-create name-label="$name_label"
}

function _multiple_networks_with_name() {
    local name_label
    name_label=$1

    # A comma indicates multiple matches
    xe network-list name-label="$name_label" --minimal | grep -q ","
}

function _network_exists() {
    local name_label
    name_label=$1

    ! [ -z $(xe network-list name-label="$name_label" --minimal) ]
}

function _bridge_exists() {
    local bridge
    bridge=$1

    ! [ -z $(xe network-list bridge="$bridge" --minimal) ]
}

function _network_uuid() {
    local bridge_or_net_name
    bridge_or_net_name=$1

    if _bridge_exists "$bridge_or_net_name"; then
        xe network-list bridge="$bridge_or_net_name" --minimal
    else
        xe network-list name-label="$bridge_or_net_name" --minimal
    fi
}

function add_interface() {
    local vm_name_label
    local bridge_or_network_name

    vm_name_label="$1"
    bridge_or_network_name="$2"
    device_number="$3"

    local vm
    local net

    vm=$(_vm_uuid "$vm_name_label")
    net=$(_network_uuid "$bridge_or_network_name")
    xe vif-create network-uuid=$net vm-uuid=$vm device=$device_number
}

function setup_network() {
    local bridge_or_net_name
    bridge_or_net_name=$1

    if ! _bridge_exists "$bridge_or_net_name"; then
        if _network_exists "$bridge_or_net_name"; then
            if _multiple_networks_with_name "$bridge_or_net_name"; then
                cat >&2 << EOF
ERROR: Multiple networks found matching name-label to "$bridge_or_net_name"
please review your XenServer network configuration / localrc file.
EOF
                exit 1
            fi
        else
            _create_new_network "$bridge_or_net_name"
        fi
    fi
}

function bridge_for() {
    local bridge_or_net_name
    bridge_or_net_name=$1

    if _bridge_exists "$bridge_or_net_name"; then
        echo "$bridge_or_net_name"
    else
        xe network-list name-label="$bridge_or_net_name" params=bridge --minimal
    fi
}

function xenapi_ip_on() {
    local bridge_or_net_name
    bridge_or_net_name=$1

    ifconfig $(bridge_for "$bridge_or_net_name") | grep "inet addr" | cut -d ":" -f2 | sed "s/ .*//"
}

function xenapi_is_listening_on() {
    local bridge_or_net_name
    bridge_or_net_name=$1

    ! [ -z $(xenapi_ip_on "$bridge_or_net_name") ]
}

function parameter_is_specified() {
    local parameter_name
    parameter_name=$1

    compgen -v | grep "$parameter_name"
}

function append_kernel_cmdline()
{
    local vm_name_label
    local kernel_args

    vm_name_label="$1"
    kernel_args="$2"

    local vm
    local pv_args

    vm=$(_vm_uuid "$vm_name_label")
    pv_args=$(xe vm-param-get param-name=PV-args uuid=$vm)
    xe vm-param-set PV-args="$pv_args $kernel_args" uuid=$vm
}

function destroy_all_vifs_of()
{
    local vm_name_label

    vm_name_label="$1"

    local vm

    vm=$(_vm_uuid "$vm_name_label")
    IFS=,
    for vif in $(xe vif-list vm-uuid=$vm --minimal); do
        xe vif-destroy uuid="$vif"
    done
    unset IFS
}

function print_ip() {
    local xenapi_connection_url

    xenapi_connection_url="$1"

    echo $xenapi_connection_url | tr -d -c '1234567890.'
}

function _print_domid() {
    local vm_name_label

    vm_name_label="$1"

    xe vm-list name-label="$vm_name_label" params=dom-id minimal=true
}

function _print_vnc_port() {
    local vm_name_label

    vm_name_label="$1"

    xenstore-read \
        /local/domain/$(_print_domid "$vm_name_label")/console/vnc-port
}

function print_display() {
    local vm_name_label

    vm_name_label="$1"

    expr $(_print_vnc_port "$vm_name_label") - 5900
}

function log_info() {
    set +x
    echo -e "\e[0;32m"
    cat | sed 's/^/INFO: /'
    echo -e "\e[0m"
    set -x
}

function log_error() {
    set +x
    echo -e "\e[0;31m"
    cat | sed 's/^/ERROR: /'
    echo -e "\e[0m"
    set -x
}

function wait_for_vm_to_halt() {
    local vm_name_label

    vm_name_label="$1"

    local vm_state

    set +x
    while true; do
        vm_state=$(xe vm-list name-label="$vm_name_label" power-state=halted --minimal)
        if [ -n "$vm_state" ]; then
            break
        else
            sleep 20
        fi
    done
    set -x
}

function _set_reboot_action() {
    local vm_name_label
    local action

    vm_name_label="$1"
    action="$2"

    local vm

    vm=$(_vm_uuid "$vm_name_label")
    xe vm-param-set actions-after-reboot=$action uuid=$vm
}

function set_reboot_on_restart() {
    local vm_name_label

    vm_name_label="$1"

    _set_reboot_action "$vm_name_label" "Restart"
}

function set_halt_on_restart() {
    local vm_name_label

    vm_name_label="$1"

    _set_reboot_action "$vm_name_label" "Destroy"
}


function uninstall_vm() {
    local vm_name_label

    vm_name_label="$1"

    local vm

    vm=$(_vm_uuid "$vm_name_label")

    #TODO: vdis don't get destroyed
    xe vm-uninstall vm=$vm force=true
}

function snapshot_missing() {
    local snapshot

    snapshot="$1"

    [ -z "$(xe snapshot-list name-label="$snapshot" --minimal)" ]
}

function clone_template_as_vm() {
    local template_name_label
    local vm_name_label

    template_name_label="$1"
    vm_name_label="$2"

    local template
    local vm

    template=$(xe template-list name-label="$template_name_label" --minimal)
    [ -n "$template" ]

    vm=$(xe vm-clone uuid=$template new-name-label="$vm_name_label")
    [ -n "$vm" ]

    xe vm-param-set uuid=$vm name-description="$vm_name_label"
    xe vm-param-set uuid=$vm is-a-template=false
}

function set_vm_memory() {
    local vm_name_label
    local memory

    vm_name_label="$1"
    memory="$2"

    local vm

    vm=$(_vm_uuid "$vm_name_label")

    xe vm-memory-limits-set \
        static-min=${memory}MiB \
        static-max=${memory}MiB \
        dynamic-min=${memory}MiB \
        dynamic-max=${memory}MiB \
        uuid=$vm
}

function add_boot_disk() {
    local vm_name_label
    local disk_size_gb

    vm_name_label="$1"
    disk_size_gb="$2"

    local vm
    local sr

    vm=$(_vm_uuid "$vm_name_label")
    sr=$(get_local_sr)

    local vdi

    vdi=$(xe vdi-create \
        name-label="boot" \
        sr-uuid=$sr \
        type=system \
        virtual-size="${disk_size_gb}GiB")

    xe vbd-create vm-uuid=$vm vdi-uuid=$vdi device=0 bootable=true
}

function print_essential_installer_args() {
    local ubuntu_inst_locale
    local ubuntu_inst_keyboard
    local preseed_url

    ubuntu_inst_locale="$1"
    ubuntu_inst_keyboard="$2"
    preseed_url="$3"

    echo -n "partman/default_filesystem=ext3 \
console-setup/ask_detect=false locale=${ubuntu_inst_locale} \
keyboard-configuration/layoutcode=${ubuntu_inst_keyboard} \
netcfg/choose_interface=eth0 \
netcfg/get_hostname=os netcfg/get_domain=os auto \
url=${preseed_url}"

}

function print_installer_args_for_static_ip() {
    local ubuntu_inst_nameservers
    local ubuntu_inst_ip
    local ubuntu_inst_netmask
    local ubuntu_inst_gateway

    ubuntu_inst_nameservers="$1"
    ubuntu_inst_ip="$2"
    ubuntu_inst_netmask="$3"
    ubuntu_inst_gateway="$4"

    echo -n "netcfg/disable_autoconfig=true \
netcfg/get_nameservers=${ubuntu_inst_nameservers} \
netcfg/get_ipaddress=${ubuntu_inst_ip} \
netcfg/get_netmask=${ubuntu_inst_netmask} \
netcfg/get_gateway=${ubuntu_inst_gateway} \
netcfg/confirm_static=true"
}

function set_other_config_for_netinstall() {
    local vm_name_label
    local ubuntu_inst_http_hostname
    local ubuntu_inst_http_directory
    local ubuntu_inst_release
    local ubuntu_inst_arch

    vm_name_label="$1"
    ubuntu_inst_http_hostname="$2"
    ubuntu_inst_http_directory="$3"
    ubuntu_inst_release="$4"
    ubuntu_inst_arch="$5"

    local vm

    vm=$(_vm_uuid "$vm_name_label")

    xe vm-param-set uuid=$vm \
        other-config:install-methods=http \
        other-config:install-repository="http://${ubuntu_inst_http_hostname}${ubuntu_inst_http_directory}" \
        other-config:debian-release="$ubuntu_inst_release" \
        other-config:install-arch="$ubuntu_inst_arch"
}

function set_install_proxy() {
    local vm_name_label
    local ubuntu_inst_http_proxy

    vm_name_label="$1"
    ubuntu_inst_http_proxy="$2"

    local vm

    vm=$(_vm_uuid "$vm_name_label")
    xe vm-param-set uuid=$vm \
        other-config:install-proxy="$ubuntu_inst_http_proxy"
}

function start_vm() {
    local vm_name_label

    vm_name_label="$1"

    local vm

    vm=$(_vm_uuid "$vm_name_label")
    xe vm-start uuid=$vm
}

function snapshot_vm() {
    local vm_name_label
    local snapshot_name

    vm_name_label="$1"
    snapshot_name="$2"

    xe vm-snapshot vm="$vm_name_label" new-name-label="$snapshot_name"
}
