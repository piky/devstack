{
  "comments": [
    {
      "key": {
        "uuid": "ba2be162_29b5dbcc",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-02-28T21:35:25Z",
      "side": 1,
      "message": "This is probably a bit aggressive to be honest. Per-connection buffers are pretty small anyway.",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_171d8973",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 9664
      },
      "writtenOn": "2017-03-01T00:59:08Z",
      "side": 1,
      "message": "So this could cause failures; yes. But they are very obvious (the error message is) and I\u0027m not sure about the per connection overhead being small. I\u0027ve generally reduced this as the first step in any memory diet.\n\nThe total memory used per connection is (sort_buffer_size + read_buffer_size + read_rnd_buffer_size + join_buffer_size + thread_stack + binlog_cache_size). So with the numbers we have a per connection overhead of 10.3MB.\n\nThe difference between 256 and 1024 is therefore about 8gb IF YOU ACTUALLY GET UP TO 1024 CONNECTIONS.\n\nA simple tool that I\u0027ve found to be helpful in the past is http://www.mysqlcalculator.com/",
      "parentUuid": "ba2be162_29b5dbcc",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_18abf175",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-01T07:16:02Z",
      "side": 1,
      "message": "Cool, let\u0027s dig into that a little. binlog_cache_size is only allocated when binary logging is enabled. We should definitely disable that in a devstack context (yay, 4K). We have read_rnd_buffer_size set to 8200 bytes, but we could drop it lower (manual says min of 1 byte.. I\u0027d say we could go to 256 bytes so that at least the few ordered joins we do are not 100% disk serviced. \nWith those adjustments:\n\nsort_buffer_size \u003d 32768\nread_buffer_size \u003d 8200\nread_rnd_buffer_size \u003d 256\njoin_buffer_size \u003d 128\nthread_stack \u003d 196608\nbinlog_cache_size \u003d (0|4096)\n\nNot sure how you got to 10.3MB earlier, maybe we forgot a variable? With the changes I suggest, it gets even lower. All I did was drop binlog_cache_size\u0027s 4K, and read_rnd_buffer_size\u0027s 8200 bytes. But if you make the adjustments I suggest, per-conn overhead using your formula is 237960, or about 232kB. So the difference is 256*232 \u003d\u003d 58MB (total at 256 connections) vs. 1024*232 \u003d\u003d 237MB.. so.. a far cry from 8GB? Anyway, 256 is fine, but I think 512 would give more padding to not break anybody.",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_49ca0f51",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-02-28T21:35:25Z",
      "side": 1,
      "message": "I\u0027d set this to 0. We don\u0027t use fulltext searches in OpenStack (and if we do, we should stop immediately!)",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_d774d1fe",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 9664
      },
      "writtenOn": "2017-03-01T00:59:08Z",
      "side": 1,
      "message": "I agree but the min is 1600000 (see: https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_ft_cache_size)",
      "parentUuid": "ba2be162_49ca0f51",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_38b6f5dc",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-01T07:16:02Z",
      "side": 1,
      "message": "TIL those are just limits, and 0 is allocated until you make an innodb fulltext query. Thanks for reminding me to RTFM. :-D",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_69c7d345",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-02-28T21:35:25Z",
      "side": 1,
      "message": "Same for this.",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_575f0172",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 9664
      },
      "writtenOn": "2017-03-01T00:59:08Z",
      "side": 1,
      "message": "Ditto, this is the minimum (https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_ft_total_cache_size)",
      "parentUuid": "ba2be162_69c7d345",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_89c40741",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-02-28T21:35:25Z",
      "side": 1,
      "message": "This is a small win, but could cause things to crash where they wouldn\u0027t normally crash. IMO, leave this one at the default.",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_f778f5fa",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 9664
      },
      "writtenOn": "2017-03-01T00:59:08Z",
      "side": 1,
      "message": "OK, I\u0027ll split the difference and make it 192k (the 32 bit default)",
      "parentUuid": "ba2be162_89c40741",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2be162_58bba9c4",
        "filename": "lib/databases/mysql",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-01T07:16:02Z",
      "side": 1,
      "message": "Should be enough. I have another side of me that wants it at the minimum, because I don\u0027t want OpenStack to depend on heavy, complicated queries that would overflow this.",
      "revId": "52772a37dcfbd98a7d2886f3d7e22c5cb9324644",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}