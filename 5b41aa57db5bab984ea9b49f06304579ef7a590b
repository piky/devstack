{
  "comments": [
    {
      "key": {
        "uuid": "3fa7e38b_2746fb23",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 30491
      },
      "writtenOn": "2020-01-24T08:37:25Z",
      "side": 1,
      "message": "I do wonder why you would need that since install_prereqs sets the correct PYTHON as the environment variable.",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_a7266b21",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 27329
      },
      "writtenOn": "2020-01-24T09:05:58Z",
      "side": 1,
      "message": "it looks like PYTHON variable is not picked up when starting this script as a service with below command:\n\n sudo systemctl start devstack@memory_tracker.service\n\nPlease have look to this log file:\n https://180462068c1ebb89385a-b7d34d92d3c0fa84052da2d7ba8871be.ssl.cf2.rackcdn.com/704006/1/check/tobiko-devstack-faults-centos-7/bb86790/compute1/logs/devstacklog.txt\n\nI had the same failure with Centos 7 and with Ubuntu Bionic",
      "parentUuid": "3fa7e38b_2746fb23",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_877fafdc",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 30491
      },
      "writtenOn": "2020-01-24T09:12:57Z",
      "side": 1,
      "message": "Good catch. You are right here. You sure py3 always has psutil? Cause devstack no longer install it per https://review.opendev.org/#/c/703792/\n\nI added that also on the bug report.",
      "parentUuid": "3fa7e38b_a7266b21",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_47d3f7d3",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 27329
      },
      "writtenOn": "2020-01-24T10:06:17Z",
      "side": 1,
      "message": "Please have a look to below log:\n\n https://180462068c1ebb89385a-b7d34d92d3c0fa84052da2d7ba8871be.ssl.cf2.rackcdn.com/704006/1/check/tobiko-devstack-faults-centos-7/bb86790/compute1/logs/devstacklog.txt\n\nIt looks like executing below command it doesn\u0027t preserves PYTHON variable:\n\nsudo systemctl status devstack@memory_tracker.service --no-pager",
      "parentUuid": "3fa7e38b_2746fb23",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_65194b74",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 30491
      },
      "writtenOn": "2020-01-24T10:33:47Z",
      "side": 1,
      "message": "Ah, it looks like it is installing psutil because e.g. cinder wants it. Another case for using venv for different things or else we break each other from time to time.",
      "parentUuid": "3fa7e38b_47d3f7d3",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_3bc4d240",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 27329
      },
      "writtenOn": "2020-01-24T13:36:35Z",
      "side": 1,
      "message": "Indeed. I agree with you. But situation is not that bad until we install things using upper-requirements.txt file for pinning package versions. Please note all things we are delivering in OpenStack at the end has to coexist on the same Linux distribution with a pinned version (even if from inside a container). Therefore we have to be prepared to make scripts to work with all the same version, even if I would prefer we use a virtualenv as you suggest. I totally agree developers (an DevStack) should always test its code from inside a clean virtual environment to avoid the kind o problems derived by using conflicting versions.",
      "parentUuid": "3fa7e38b_65194b74",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_1668cb1f",
        "filename": "tools/memory_tracker.sh",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 30491
      },
      "writtenOn": "2020-01-24T14:57:20Z",
      "side": 1,
      "message": "Yeah, I did not mean venv per installed project. More like venv for all + venv for devstack misc stuff (if applicable). venv eliminates the distro effects. The situation might get better by itself when we move to focal and C8 where we get cleaner env for py3 and py3 only. :-)",
      "parentUuid": "3fa7e38b_3bc4d240",
      "range": {
        "startLine": 17,
        "startChar": 17,
        "endLine": 17,
        "endChar": 24
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_07b41f1c",
        "filename": "tools/mlock_report.py",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 30491
      },
      "writtenOn": "2020-01-24T08:37:25Z",
      "side": 1,
      "message": "not really relevant",
      "range": {
        "startLine": 1,
        "startChar": 15,
        "endLine": 1,
        "endChar": 22
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa7e38b_672cf3ff",
        "filename": "tools/mlock_report.py",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 27329
      },
      "writtenOn": "2020-01-24T09:07:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fa7e38b_07b41f1c",
      "range": {
        "startLine": 1,
        "startChar": 15,
        "endLine": 1,
        "endChar": 22
      },
      "revId": "5b41aa57db5bab984ea9b49f06304579ef7a590b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}