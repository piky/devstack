# lib/trove
# Functions to control the configuration and operation of the **Trove** service

# Dependencies:
# ``functions`` file
# ``DEST``, ``STACK_USER`` must be defined
# ``SERVICE_{HOST|PROTOCOL|TOKEN}`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# install_trove
# configure_trove
# init_trove
# start_trove
# stop_trove
# cleanup_trove

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------

NETWORK_GATEWAY=${NETWORK_GATEWAY:-10.0.0.1}

# Set up default configuration
TROVE_DIR=$DEST/trove
TROVECLIENT_DIR=$DEST/python-troveclient
TROVE_CONF_DIR=/etc/trove
TROVE_LOCAL_CONF_DIR=$TROVE_DIR/etc/trove
TROVE_AUTH_ENDPOINT=$KEYSTONE_AUTH_PROTOCOL://$KEYSTONE_AUTH_HOST:$KEYSTONE_AUTH_PORT//v$IDENTITY_API_VERSION
TROVE_AUTH_CACHE_DIR=${TROVE_AUTH_CACHE_DIR:-/var/cache/trove}
TROVE_BIN_DIR=/usr/local/bin

# Set Trove interface related configuration
TROVE_SERVICE_HOST=${TROVE_SERVICE_HOST:-$SERVICE_HOST}
TROVE_SERVICE_PORT=${TROVE_SERVICE_PORT:-8779}
TROVE_SERVICE_PROTOCOL=${TROVE_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}
TROVE_USER_PASS=${TROVE_USER_PASS:-TROVE-PASS}
RADMIN_USER_PASS=${RADMIN_USER_PASS:-radmin}



# Configure Keystone for Trove
# ----------------------------

function trove_get_attribute_id() {
    keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN $1-list | grep $2 | get_field $3
}

function trove_add_keystone_user() {
    # Adds a "trove" user to keystone.
    USER_NAME=$1
    USER_PASS=$2
    USER_EMAIL=$3
    USER_TENANT=$4
    # Create the user "trove"
    USER_UUID=`trove_get_attribute_id user $USER_NAME 1`
    if [ -z "$USER_UUID" ]; then
        USER_UUID=$(keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN user-create \
            --name=$USER_NAME \
            --pass=$USER_PASS \
            --email=$USER_EMAIL \
            --tenant_id $USER_TENANT \
            | grep " id " | get_field 2)
    fi
    echo $USER_UUID
}

function trove_create_keystone_user_role() {
    TENANT_UUID=$1
    USER_UUID=$2
    ROLE_UUID=$3
    keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN user-role-add \
        --tenant_id $TENANT_UUID \
        --user_id $USER_UUID \
        --role_id $ROLE_UUID
}

function trove_create() {
    keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN $1-create \
             --name $2 \
             | grep " id " | get_field 2
}

function trove_configure_keystone() {
    # Create the "trove" tenant id it doesn't exist
    TROVE_TENANT=`trove_get_attribute_id tenant trove 1`
    if [ -z "$TROVE_TENANT" ]; then
        TROVE_TENANT=$(trove_create tenant trove)
    fi

    # Create the trove role if it doesn't exist.
    # Admin role should already exist
    ADMIN_ROLE=`trove_get_attribute_id role admin 1`
    TROVE_ROLE=`trove_get_attribute_id role trove 1`
    if [ -z "$TROVE_ROLE" ]; then
        TROVE_ROLE=$(trove_create role trove)
    fi

    # Set up essential users and roles
    TROVE_USER=$(trove_add_keystone_user trove $TROVE_USER_PASS trove@example.com $TROVE_TENANT)
    trove_create_keystone_user_role $TROVE_TENANT $TROVE_USER $TROVE_ROLE

    RADMIN_USER=$(trove_add_keystone_user radmin $RADMIN_USER_PASS radmin@example.com $TROVE_TENANT)
    trove_create_keystone_user_role $TROVE_TENANT $RADMIN_USER $TROVE_ROLE
    trove_create_keystone_user_role $TROVE_TENANT $RADMIN_USER $ADMIN_ROLE

    # Register trove service.
    TROVE_SERVICE_UUID=$(keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN service-list | grep "trove" | get_field 1)
    if [ -z $TROVE_SERVICE_UUID ]; then
        TROVE_SERVICE_UUID=$(keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN service-create \
            --name=trove \
            --type=database \
            --description="Trove Database as a Service" \
            | grep " id " | get_field 2)
        keystone --endpoint $TROVE_AUTH_ENDPOINT --token $SERVICE_TOKEN endpoint-create \
            --region RegionOne \
            --service_id $TROVE_SERVICE_UUID \
            --publicurl "$TROVE_SERVICE_PROTOCOL://$TROVE_SERVICE_HOST:$TROVE_SERVICE_PORT/v1.0/\$(tenant_id)s" \
            --adminurl "$TROVE_SERVICE_PROTOCOL://$TROVE_SERVICE_HOST:$TROVE_SERVICE_PORT/v1.0/\$(tenant_id)s" \
            --internalurl "$TROVE_SERVICE_PROTOCOL://$TROVE_SERVICE_HOST:$TROVE_SERVICE_PORT/v1.0/\$(tenant_id)s"
    fi
}


# stack.sh entry points
# ---------------------

# cleanup_trove() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_trove() {
    #Clean up dirs
    rm -fr $TROVE_AUTH_CACHE_DIR/*
    rm -fr $TROVE_CONF_DIR/*
}

# configure_troveclient() - Set config files, create data dirs, etc
function configure_troveclient() {
    setup_develop $TROVECLIENT_DIR
}

# configure_trove() - Set config files, create data dirs, etc
function configure_trove() {
    setup_develop $TROVE_DIR

    #Configure keystone for trove.
    trove_configure_keystone

    # Create the trove conf dir and cache dirs if they don't exist
    sudo mkdir -p ${TROVE_CONF_DIR}
    sudo mkdir -p ${TROVE_AUTH_CACHE_DIR}
    sudo chown -R $STACK_USER: ${TROVE_CONF_DIR}
    sudo chown -R $STACK_USER: ${TROVE_AUTH_CACHE_DIR}

    # Copy api-paste file over to the trove conf dir and configure it
    cp $TROVE_LOCAL_CONF_DIR/api-paste.ini $TROVE_CONF_DIR/api-paste.ini
    iniset $TROVE_CONF_DIR/api-paste.ini filter:authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $TROVE_CONF_DIR/api-paste.ini filter:authtoken admin_user radmin
    iniset $TROVE_CONF_DIR/api-paste.ini filter:authtoken admin_password $RADMIN_USER_PASS
    iniset $TROVE_CONF_DIR/api-paste.ini filter:tokenauth signing_dir $TROVE_AUTH_CACHE_DIR

    # (Re)create trove conf files
    rm -f $TROVE_CONF_DIR/trove.conf
    rm -f $TROVE_CONF_DIR/trove-taskmanager.conf
    iniset $TROVE_CONF_DIR/trove.conf DEFAULT rabbit_password $RABBIT_PASSWORD
    iniset $TROVE_CONF_DIR/trove.conf DEFAULT sql_connection `database_connection_url trove`

    iniset $TROVE_LOCAL_CONF_DIR/trove-guestagent.conf.sample DEFAULT rabbit_password $RABBIT_PASSWORD
    iniset $TROVE_LOCAL_CONF_DIR/trove-guestagent.conf.sample DEFAULT sql_connection `database_connection_url trove`
    sed -i "s/localhost/$NETWORK_GATEWAY/g" $TROVE_LOCAL_CONF_DIR/trove-guestagent.conf.sample

    # (Re)create trove taskmanager conf file if needed
    if is_service_enabled tr-tmgr; then
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT rabbit_password $RABBIT_PASSWORD
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT sql_connection `database_connection_url trove`
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT taskmanager_manager trove.taskmanager.manager.Manager
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT nova_proxy_admin_user radmin
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT nova_proxy_admin_tenant_name trove
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT nova_proxy_admin_pass $RADMIN_USER_PASS
        iniset $TROVE_CONF_DIR/trove-taskmanager.conf DEFAULT trove_auth_url $TROVE_AUTH_ENDPOINT/tokens
    fi
}

# install_troveclient() - Collect source and prepare
function install_troveclient() {
    git_clone $TROVECLIENT_REPO $TROVECLIENT_DIR $TROVECLIENT_BRANCH
}

# install_trove() - Collect source and prepare
function install_trove() {
    git_clone $TROVE_REPO $TROVE_DIR $TROVE_BRANCH
}

# init_trove() - Initializes Trove Database as a Service
function init_trove() {
    #(Re)Create trove db
    recreate_database trove utf8

    #Initialize the trove database
    $TROVE_DIR/bin/trove-manage db_sync
}

# start_trove() - Start running processes, including screen
function start_trove() {
    screen_it tr-api "cd $TROVE_DIR; bin/trove-api --config-file=$TROVE_CONF_DIR/trove.conf --debug 2>&1"
    screen_it tr-tmgr "cd $TROVE_DIR; bin/trove-taskmanager --config-file=$TROVE_CONF_DIR/trove-taskmanager.conf --debug 2>&1"
}

# stop_trove() - Stop running processes
function stop_trove() {
    # Kill the trove screen windows
    for serv in tr-api tr-tmgr; do
        screen -S $SCREEN_NAME -p $serv -X kill
    done
}

# Restore xtrace
$XTRACE

# Local variables:
# mode: shell-script
# End:
