#!/bin/bash
# lib/kafka
# Functions to control the configuration and operation of the Kafka messaging service
#
# Dependencies:
#   - ``functions`` file
#
# ``stack.sh`` calls the entry points in this order (via ``extras.d/40-kafka.sh``):
#   - download_kafka
#   - install_kafka
#   - configure_kafka
#   - init_kafka
#   - stop_kafka
#   - cleanup_kafka

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------
# Set ``KAFKA_DIR`` to the location of Kafka.
DEST=${DEST:-/opt/stack}

# Specify Kafka version
KAFKA_VERSION=${KAFKA_VERSION:-0.8.2.1}
KAFKA_BASEURL=${KAFKA_BASEURL:-http://www.us.apache.org/dist/kafka}

# Specify Scala version
SCALA_VERSION=${SCALA_VERSION:-2.10}
SCALA_BASEURL=${SCALA_BASEURL:-http://www.scala-lang.org/files/archive}

# Functions
# ------------
# download_kafka() - downloading kafka
function download_kafka {
    if [ ! -f ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz ]; then
        wget ${KAFKA_BASEURL}/${KAFKA_VERSION}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz \
            -O ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz
    fi
}

# install_kafka() - installing Kafka with Scala and Zookeeper
function install_kafka {

    local scala_version=${SCALA_VERSION}.0

    if is_ubuntu; then
        sudo apt-get install scala
    elif is_fedora; then

        is_package_installed java-1.8.0-openjdk-headless || install_package java-1.8.0-openjdk-headless

        if [ ! -f ${FILES}/scala-${scala_version}.tar.gz ]; then
            wget ${SCALA_BASEURL}/scala-${scala_version}.tgz \
                -O ${FILES}/scala-${scala_version}.tar.gz
        fi

        if [ ! -d ${FILES}/scala-${scala_version} ]; then
            tar -xvzf ${FILES}/scala-${scala_version}.tar.gz -C ${FILES}
        fi

        if [ ! -d /usr/lib/scala-${scala_version} ]; then
            sudo mv ${FILES}/scala-${scala_version} /usr/lib
            sudo ln -s /usr/lib/scala-${scala_version} /usr/lib/scala
            export PATH=$PATH:/usr/lib/scala/bin
        fi
    fi

    download_kafka

    if [ ! -d ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION} ]; then
        tar -xvzf ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz -C ${FILES}
    fi
    if [ ! -d ${DEST}/kafka ]; then
        mv ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION} ${DEST}/kafka
    fi
}

# init_kafka() - starting Kafka and Zookeeper processes
function init_kafka {
    # start Zookeeper process before starting Kafka
    ${DEST}/kafka/bin/zookeeper-server-start.sh -daemon ${DEST}/kafka/config/zookeeper.properties
    ${DEST}/kafka/bin/kafka-server-start.sh -daemon ${DEST}/kafka/config/server.properties
}

# configure_kafka() - configuring Kafka service
function configure_kafka {
    # currently a no op
    :
}

# stop_kafka() - stopping Kafka process
function stop_kafka {
    ${DEST}/kafka/bin/kafka-server-stop.sh
    ${DEST}/kafka/bin/zookeeper-server-stop.sh
}

# cleanup_kafka() - removing Kafka files
# make sure this function is called only after calling stop_kafka() function
function cleanup_kafka {
    rm ${FILES}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz
    rm -rf ${DEST}/kafka
}


# Restore xtrace
$XTRACE

## Local variables:
## mode: shell-script
## End:
