# lib/nova_plugins/hypervisor-baremetal
# Configure the BareMetal hypervisor

# Enable with:
# VIRT_DRIVER=baremetal

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------

LIBVIRT_FIREWALL_DRIVER=${LIBVIRT_FIREWALL_DRIVER:-"nova.virt.firewall.NoopFirewallDriver"}


# Entry Points
# ------------

# configure_nova_hypervisor() - Set config files, create data dirs, etc
function configure_nova_hypervisor() {
    echo_summary "Using BareMetal driver"
    iniset $NOVA_CONF DEFAULT compute_driver nova.virt.baremetal.driver.BareMetalDriver
    iniset $NOVA_CONF DEFAULT firewall_driver $LIBVIRT_FIREWALL_DRIVER
    iniset $NOVA_CONF DEFAULT scheduler_host_manager nova.scheduler.baremetal_host_manager.BaremetalHostManager
    iniset $NOVA_CONF DEFAULT ram_allocation_ratio 1.0
    iniset $NOVA_CONF DEFAULT reserved_host_memory_mb 0
    iniset $NOVA_CONF baremetal instance_type_extra_specs cpu_arch:$BM_CPU_ARCH
    iniset $NOVA_CONF baremetal driver $BM_DRIVER
    iniset $NOVA_CONF baremetal power_manager $BM_POWER_MANAGER
    iniset $NOVA_CONF baremetal tftp_root /tftpboot

    if [[ "$BM_DNSMASQ_FROM_NOVA_NETWORK" = "True" ]]; then
        BM_DNSMASQ_CONF=$NOVA_CONF_DIR/dnsmasq-for-baremetal-from-nova-network.conf
        sudo cp "$FILES/dnsmasq-for-baremetal-from-nova-network.conf" "$BM_DNSMASQ_CONF"
        iniset $NOVA_CONF DEFAULT dnsmasq_config_file "$BM_DNSMASQ_CONF"
    fi

    # Define extra baremetal nova conf flags by defining the array ``EXTRA_BAREMETAL_OPTS``.
    for I in "${EXTRA_BAREMETAL_OPTS[@]}"; do
       # Attempt to convert flags to options
       iniset $NOVA_CONF baremetal ${I/=/ }
    done
}


# Restore xtrace
$MY_XTRACE

# Local variables:
# mode: shell-script
# End:
