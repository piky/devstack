# lib/reddwarf
# Install and start Reddwarf (DBaaS) service
# To enable, add the following to localrc
# ENABLED_SERVICES+=,reddwarf,rd-api,rd-tmgr

# Dependencies:
# - functions

# stack.sh
# ---------
# install_XXX
# configure_XXX
# init_XXX
# start_XXX
# stop_XXX
# cleanup_XXX

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Set up default configuration
REDDWARF_DIR=$DEST/reddwarf/
REDDWARFCLIENT_DIR=$DEST/python-reddwarfclient/
REDDWARF_PACKAGES_DIR=/var/lib/packages/debian/
REDDWARF_BUILD_DIR=/tmp/build/
REDDWARF_INTEGRATION_CONF_DIR=/tmp/reddwarf-integration/
REDDWARF_ENV_CONF_PATH=$REDDWARF_INTEGRATION_CONF_DIR/env.rc
REDDWARF_CONF_DIR=/etc/reddwarf/
REDDWARF_KEYSTONE_ENDPOINT=$KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_AUTH_HOST:$KEYSTONE_AUTH_PORT/v2.0

# Set Reddwarf interface related configuration
REDDWARF_SERVICE_HOST=${REDDWARF_SERVICE_HOST:-$SERVICE_HOST}
REDDWARF_SERVICE_PORT=${REDDWARF_SERVICE_PORT:-8779}
REDDWARF_SERVICE_PROTOCOL=${REDDWARF_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}

# Support potential entry-points for console scripts
if [ -d $REDDWARF_DIR/bin ] ; then
    REDDWARF_BIN_DIR=$REDDWARF_DIR/bin
else
    REDDWARF_BIN_DIR=/usr/local/bin
fi

###############################################################################
# Misc. tools
###############################################################################

# msgout() - prints message with severity and time to stdout.
function msgout() {
    local level=$1
    local str=$2
    local tm=`date +"%Y-%m-%d %H:%M:%S"`
    if [ $level = "DEBUG" ] && [ -z $VERBOSE ]; then
            return 0
    else
        echo "$tm: $PROG [$$]: $1: $str"
    fi

    return 0
}

function reddwarf_mysql_nova() {
    echo mysql nova --execute "$@"
    mysql -u root -p$DATABASE_PASSWORD nova --execute "$@"
}

function reddwarf_manage() {
    cd $REDDWARF_DIR
    bin/reddwarf-manage --config-file=$REDDWARF_CONF_DIR/reddwarf.conf $@
}

###############################################################################
# Configure Keystone for Reddwarf related helper functions
###############################################################################

function reddwarf_get_attribute_id() {
    keystone $1-list | grep $2 | get_field 2
}

function reddwarf_add_keystone_user() {
    # Adds a user. Prints the UUID to standard out.
    USER_NAME=$1
    USER_PASS=$2
    USER_EMAIL=$3
    USER_TENANT=$4
    # Create the user "reddwarf"
    USER_UUID=$(get_attribute_id user $USER_NAME)
    if [ -z $USER_UUID ]; then
        USER_UUID=$(keystone user-create \
            --name=$USER_NAME \
            --pass=$USER_PASS \
            --email=$USER_EMAIL \
            --tenant_id $USER_TENANT \
            | grep " id " | get_field 2)
    fi
    echo $USER_UUID
}

function reddwarf_add_keystone_user_role() {
    TENANT_UUID=$1
    USER_UUID=$2
    ROLE_UUID=$3
    keystone user-role-add \
        --tenant_id $TENANT_UUID \
        --user_id $USER_UUID \
        --role_id $ROLE_UUID
}

function reddwarf_configure_keystone() {
    msgout "DEBUG" "Configuring keystone..."

    # Create the tenant "reddwarf".
    # First we should check if these exist
    REDDWARF_TENANT=`get_attribute_id tenant reddwarf`
    if [ -z $REDDWARF_TENANT ]; then
        REDDWARF_TENANT=$(keystone tenant-create \
            --name reddwarf \
            | grep " id " | get_field 2)
    fi

    # Create the reddwarf role if it doesn't exist.
    # Admin role should already exist
    ADMIN_ROLE=`get_attribute_id role admin`
    REDDWARF_ROLE=`get_attribute_id role reddwarf`
    if [ -z "$REDDWARF_ROLE" ]; then
        REDDWARF_ROLE=$(keystone role-create \
            --name=reddwarf \
            | grep " id " | get_field 2)
    fi

    REDDWARF_USER=$(reddwarf_add_keystone_user reddwarf REDDWARF-PASS reddwarf@example.com $REDDWARF_TENANT)
    reddwarf_add_keystone_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    RADMIN_USER=$(reddwarf_add_keystone_user radmin radmin reddwarf@example.com $REDDWARF_TENANT)
    reddwarf_add_keystone_user_role $REDDWARF_TENANT $RADMIN_USER $REDDWARF_ROLE
    reddwarf_add_keystone_user_role $REDDWARF_TENANT $RADMIN_USER $ADMIN_ROLE

    iniset $REDDWARF_ENV_CONF_PATH DEFAULT REDDWARF_TENANT $REDDWARF_TENANT
    iniset $REDDWARF_ENV_CONF_PATH DEFAULT REDDWARF_USER $REDDWARF_USER
    iniset $REDDWARF_ENV_CONF_PATH DEFAULT REDDWARF_ROLE $REDDWARF_ROLE

    # Now attempt a login to check it's working
    curl -d '{"auth":{"passwordCredentials":{"username": "reddwarf", "password": "REDDWARF-PASS"},"tenantName":"reddwarf"}}' \
     -H "Content-type: application/json" $REDDWARF_KEYSTONE_ENDPOINT/tokens

    # Register reddwarf service.
    REDDWARF_SERVICE_UUID=$(keystone service-list | grep "reddwarf" | get_field 2)
    if [ -z $REDDWARF_SERVICE_UUID ]; then
        REDDWARF_SERVICE_UUID=$(keystone service-create \
            --name=reddwarf \
            --type=reddwarf \
            --description="Reddwarf Database Service" \
            | grep " id " | get_field 2)
        keystone endpoint-create \
            --region RegionOne \
            --service_id $REDDWARF_SERVICE_UUID \
            --publicurl "$REDDWARF_SERVICE_PROTOCOL://$REDDWARF_SERVICE_HOST:$REDDWARF_SERVICE_PORT/v1.0/\$(tenant_id)s" \
            --adminurl "$REDDWARF_SERVICE_PROTOCOL://$REDDWARF_SERVICE_HOST:$REDDWARF_SERVICE_PORT/v1.0/\$(tenant_id)s" \
            --internalurl "$REDDWARF_SERVICE_PROTOCOL://$REDDWARF_SERVICE_HOST:$REDDWARF_SERVICE_PORT/v1.0/\$(tenant_id)s"
    fi
}

###############################################################################
# Setup Reddwarf Config file and related functions
###############################################################################

function fix_rd_configfile() {
    # Create the reddwarf conf dir if it doesn't exist
    sudo mkdir -p ${REDDWARF_CONF_DIR}
    sudo chown -R $USER: ${REDDWARF_CONF_DIR}

    #Copy conf files over to the reddwarf conf dir
    cd $REDDWARF_DIR
    cp etc/reddwarf/reddwarf.conf.sample $REDDWARF_CONF_DIR/reddwarf.conf
    cp etc/reddwarf/reddwarf-taskmanager.conf.sample $REDDWARF_CONF_DIR/reddwarf-taskmanager.conf

    # Fix the tokens in the conf files
    iniset $REDDWARF_CONF_DIR/reddwarf.conf DEFAULT rabbit_password $RABBIT_PASSWORD
    iniset $REDDWARF_CONF_DIR/reddwarf.conf DEFAULT sql_connection mysql://root:$DATABASE_PASSWORD@$SERVICE_HOST/reddwarf
    iniset $REDDWARF_CONF_DIR/reddwarf.conf filter:tokenauth admin_token $SERVICE_TOKEN

    iniset $REDDWARF_CONF_DIR/reddwarf-taskmanager.conf DEFAULT rabbit_password $RABBIT_PASSWORD
    iniset $REDDWARF_CONF_DIR/reddwarf-taskmanager.conf DEFAULT sql_connection mysql://root:$DATABASE_PASSWORD@$SERVICE_HOST/reddwarf
    iniset $REDDWARF_CONF_DIR/reddwarf-taskmanager.conf filter:tokenauth admin_token $SERVICE_TOKEN
}

###############################################################################
# Adding new flavours to nova and related functions
###############################################################################

function add_flavor() {
    local mod="add_flavor"
    msgout "DEBUG" "$mod<-- $FLAVOR_ID ($FLAVOR_NAME), memory=$FLAVOR_MEMORY_MB, root_gb=$FLAVOR_ROOT_GB VCPUS=$5"
    FLAVOR_NAME=$1
    FLAVOR_ID=$2
    FLAVOR_MEMORY_MB=$3
    FLAVOR_ROOT_GB=$4
    FLAVOR_VCPUS=$5

    if [[ -z $(nova flavor-list | grep $FLAVOR_NAME) ]]; then
        nova flavor-create $FLAVOR_NAME $FLAVOR_ID $FLAVOR_MEMORY_MB $FLAVOR_ROOT_GB $FLAVOR_VCPUS
    fi
    msgout "DEBUG" "$mod:-->"
}

function add_flavors() {
    local mod="add_flavors"
    msgout "DEBUG" "$mod<-- "
    # Incredibly useful for testing resize in a VM.
    set +e
    add_flavor 'tinier' 6 506 10 1
    # It can also be useful to have a flavor with 512 megs and a bit of disk space.
    add_flavor 'm1.rd-tiny' 7 512 2 1
    # It's also useful to have a flavor that is slightly bigger than tiny but smaller than small...
    add_flavor 'm1.rd-smaller' 8 768 2 1
    set -e
    msgout "DEBUG" "$mod:-->"
}

###############################################################################
# stack.sh entry points
###############################################################################

# cleanup_reddwarfclient() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_reddwarfclient() {
    local mod="cleanup_reddwarfclient"
    # This function intentionally left blank
    msgout "DEBUG" "$mod:<-- "
    msgout "DEBUG" "$mod:--> "
}

# cleanup_reddwarf() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_reddwarf() {
    local mod="cleanup_reddwarf"
    # This function intentionally left blank
    msgout "DEBUG" "$mod:<-- "
    msgout "DEBUG" "$mod:--> "
}

# configure_reddwarfclient() - Set config files, create data dirs, etc
function configure_reddwarfclient() {
    local mod="configure_reddwarfclient"
    msgout "DEBUG" "$mod<-- "
    setup_develop $REDDWARFCLIENT_DIR
    msgout "DEBUG" "$mod:-->"
}

# configure_reddwarf() - Set config files, create data dirs, etc
function configure_reddwarf() {
    local mod="configure_reddwarf"
    msgout "DEBUG" "$mod<-- ($REDDWARF_DIR)"
    setup_develop $REDDWARF_DIR

    # Create the reddwarf data dir if it doesn't exist
    sudo mkdir -p ${REDDWARF_DATA_DIR}
    sudo chown -R $USER: ${REDDWARF_DATA_DIR}

    msgout "DEBUG" "$mod:-->"
}

# install_reddwarfclient() - Collect source and prepare
function install_reddwarfclient() {
    local mod="install_reddwarfclient"
    msgout "DEBUG" "$mod<-- "
    git_clone $REDDWARFCLIENT_REPO $REDDWARFCLIENT_DIR $REDDWARFCLIENT_BRANCH
    msgout "DEBUG" "$mod:-->"
}

# install_reddwarf() - Collect source and prepare
function install_reddwarf() {
    local mod="install_reddwarf"
    msgout "DEBUG" "$mod<-- "
    git_clone $REDDWARF_REPO $REDDWARF_DIR $REDDWARF_BRANCH
    msgout "DEBUG" "$mod:-->"
}

# init_reddwarf() - Initializes Reddwarf Database as a Service
function init_reddwarf() {
    local mod="init_reddwarf"
    msgout "DEBUG" "$mod<-- "

    msgout "DEBUG" "Creating reddwarf db..."
    reddwarf_mysql_nova "DROP DATABASE IF EXISTS reddwarf;"
    reddwarf_mysql_nova "CREATE DATABASE reddwarf;"

    mkdir -p $REDDWARF_INTEGRATION_CONF_PATH

    msgout "DEBUG" "Creating Keystone users..."
    reddwarf_configure_keystone

    msgout "DEBUG" "Making a temporary reddwarf config file..."
    fix_rd_configfile

    msgout "DEBUG" "Initializing the Reddwarf Database..."
    reddwarf_manage db_sync

    msgout "DEBUG" "Adding reddwarf specific flavours..."
    add_flavors

    msgout "DEBUG" "$mod:-->"
}

# start_reddwarf() - Start running processes, including screen
function start_reddwarf() {
    local mod="start_reddwarf"
    msgout "DEBUG" "$mod<-- "
    screen_it rd-api "cd $REDDWARF_DIR; bin/reddwarf-api --config-file=$REDDWARF_CONF_DIR/reddwarf.conf | tee $REDDWARF_CONF_DIR/reddwarf-api.log"
    screen_it rd-tmgr "cd $REDDWARF_DIR; bin/reddwarf-taskmanager --config-file=$REDDWARF_CONF_DIR/reddwarf-taskmanager.conf | tee $REDDWARF_CONF_DIR/reddwarf-taskmanager.log"
    msgout "DEBUG" "$mod:-->"
}

# stop_reddwarf() - Stop running processes
function stop_reddwarf() {
    local mod="stop_reddwarf"
    msgout "DEBUG" "$mod<-- "
    # Kill the reddwarf screen windows
    for serv in rd-api rd-tmgr; do
        screen -S $SCREEN_NAME -p $serv -X kill
    done
    msgout "DEBUG" "$mod:-->"
}

# Restore xtrace
$XTRACE
