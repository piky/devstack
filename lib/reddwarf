# lib/reddwarf
# Install and start Reddwarf (DBaaS) service
# To enable, add the following to localrc
# ENABLED_SERVICES+=,reddwarf,rd-api,rd-tmgr

# Dependencies:
# - functions

# stack.sh
# ---------
# install_XXX
# configure_XXX
# init_XXX
# start_XXX
# stop_XXX
# cleanup_XXX

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# msgout() - prints message with severity and time to stdout.
function msgout() {
    local level=$1
    local str=$2
    local tm=`date +"%Y-%m-%d %H:%M:%S"`
    if [ $level = "DEBUG" ] && [ -z $VERBOSE ]; then
            return 0
    else
        echo "$tm: $PROG [$$]: $1: $str"
    fi

    return 0
}

# set up default directories
REDDWARF_DIR=$DEST/reddwarf
REDDWARFCLIENT_DIR=$DEST/python-reddwarfclient
PACKAGES_DIR=/var/lib/packages/debian/
BUILD_DIR=/tmp/build/
PATH_INTEGRATION_CONF=/tmp/reddwarf-integration/
PATH_ENV_CONF=$PATH_INTEGRATION_CONF/env.rc
USERHOME=$HOME

###############################################################################
# Misc. tools
###############################################################################

function mysql_nova() {
    echo mysql nova --execute "$@"
    mysql -u root -p$DATABASE_PASSWORD nova --execute "$@"
}

function rd_manage() {
    cd $REDDWARF_DIR
    bin/reddwarf-manage --config-file=$USERHOME/reddwarf.conf $@
}

function echo_id_from_table () {
    # Given a command that returns a table, prints only the id part.
    echo `$@ | grep ' id ' | awk '{print $4}'`
}

###############################################################################
# Package Repo related helper functions
###############################################################################

function create_package_repo() {
    local mod="create_pacakge_repo"
    msgout "DEBUG" "$mod<-- "
    install_package reprepro apache2 bc debhelper

    # install the apt repo from /var/www
    # add distributions file to conf
    sudo mkdir -p $PACKAGES_DIR/{conf,incoming}

    echo 'Origin: Openstack
Label: Database as a Service Guest Agent
Codename: squeeze
Architectures: i386 amd64
Components: main
Description: Openstack DBaaS Reddwarf APT Repository' | sudo tee $PACKAGES_DIR/conf/distributions

    msgout "DEBUG" "$mod:-->"
}

function munge_apache2() {
    local mod="munge_apache2"
    msgout "DEBUG" "$mod<-- "

    # If the Additional Listen port is not in the conf, add it
    is_in_portsfile=`grep 'Listen 8080' /etc/apache2/ports.conf |wc -l`
    if [ $is_in_portsfile == 0 ]
    then
	echo "Listen 8080" | sudo tee -a /etc/apache2/ports.conf
    fi

    # Add the vhost for 8080 because horizon is using 80
    echo "<VirtualHost *:8080>

    DocumentRoot /var/lib/packages

    ErrorLog /var/log/apache2/error.log
    LogLevel warn
    CustomLog /var/log/apache2/access.log combined
</VirtualHost>
	" | sudo tee /etc/apache2/sites-available/001-apt-repo

    sudo a2ensite 001-apt-repo
    sudo service apache2 reload
    msgout "DEBUG" "$mod:-->"
}

function add_dbass_mycnf_to_package_repo() {
    local mod="munge_apache2"
    msgout "DEBUG" "$mod<-- "

    mkdir -p $PACKAGES_DIR
    mkdir -p $BUILD_DIR
    cp -R $REDDWARF_DIR/contrib/dbaas-mycnf $BUILD_DIR
    cd $BUILD_DIR/dbaas-mycnf
    sudo -E ./builddeb.sh
    sudo -E reprepro -Vb $PACKAGES_DIR remove squeeze dbaas-mycnf
    sudo -E reprepro --ignore=wrongdistribution --ignore=undefinedtarget -Vb $PACKAGES_DIR include squeeze *.changes
    msgout "DEBUG" "mod:-->"
}

###############################################################################
# Configure Keystone for Reddwarf related helper functions
###############################################################################

function keystone_add_user() {
    # Adds a user. Prints the UUID to standard out.
    USER_NAME=$1
    USER_PASS=$2
    USER_EMAIL=$3
    # Create the user "reddwarf"
    USER_UUID=`keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN user-list | grep $USER_NAME | awk '{print $2}'`
    if [ -z $USER_UUID ]; then
        USER_UUID=`echo_id_from_table keystone \
                   --endpoint http://$SERVICE_HOST:35357/v2.0  \
                   --token $SERVICE_TOKEN user-create \
                   --name=$USER_NAME --pass="$USER_PASS" --email=$USER_EMAIL`
    fi

    echo $USER_UUID
}

function keystone_add_user_role() {
    TENANT_UUID=$1
    USER_UUID=$2
    ROLE_UUID=$3
    echo "keystone --endpoint http://$SERVICE_HOST:35357/v2.0
        --token $SERVICE_TOKEN user-role-add
        --tenant_id $TENANT_UUID
        --user $USER_UUID
        --role $ROLE_UUID"
    keystone --endpoint http://$SERVICE_HOST:35357/v2.0 \
        --token $SERVICE_TOKEN user-role-add \
        --tenant_id $TENANT_UUID \
        --user-id $USER_UUID \
        --role-id $ROLE_UUID
}

function keystone_manage () {
    keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN $@
}

function get_tenant_id() {
    keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN tenant-list | grep $1 | awk '{print $2}'
}

function get_role_id() {
    keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN role-list | grep $1 | awk '{print $2}'
}

function configure_keystone_for_reddwarf() {
    msgout "DEBUG" "Configuring keystone..."

    # Create the tenant "reddwarf".
    # First we should check if these exist
    REDDWARF_TENANT=`get_tenant_id reddwarf`
    ADMIN_ROLE=`get_role_id admin`
    if [ -z $REDDWARF_TENANT ]; then
        REDDWARF_TENANT=`echo_id_from_table keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN tenant-create --name=reddwarf`
    fi

    REDDWARF_ROLE=`get_role_id reddwarf`
    if [ -z "$REDDWARF_ROLE" ]; then
        REDDWARF_ROLE=`echo_id_from_table keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN role-create --name=reddwarf`
    fi

    DAFFY_TENANT=`get_tenant_id daffy`
    if [ -z $DAFFY_TENANT ]; then
        DAFFY_TENANT=`echo_id_from_table keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN tenant-create --name=daffy`
    fi

    DAFFY_ROLE=`get_role_id daffy`
    if [ -z "$DAFFY_ROLE" ]; then
        DAFFY_ROLE=`echo_id_from_table keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN role-create --name=daffy`
    fi

    REDDWARF_USER=`keystone_add_user reddwarf REDDWARF-PASS reddwarf@example.com`

    #TODO(tim.simpson): Write some code here that removes the roles so these
    #                   command won't fail if you run them twice.
    #                   That way we will still catch errors if our calls to
    #                   keystone fail, but can run kickstart twice w/o install.
    set +e

    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    # TODO: Restrict permissions.
    REDDWARF_USER=`keystone_add_user radmin radmin radmin@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $ADMIN_ROLE

    REDDWARF_USER=`keystone_add_user Boss admin boss@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $ADMIN_ROLE

    REDDWARF_USER=`keystone_add_user chunk chunk chunk@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    REDDWARF_USER=`keystone_add_user daffy daffy daffy@example.com`
    keystone_add_user_role $DAFFY_TENANT $REDDWARF_USER $DAFFY_ROLE

    REDDWARF_USER=`keystone_add_user examples examples examples@example.com`
    keystone_add_user_role $REDDWARF_TENANT $REDDWARF_USER $REDDWARF_ROLE

    set -e

    # Add the tenant id's into test.conf
    # Commenting out for now since tests need to be part of tempest.
    # Will revisit when we need to enable tests.
    # Add the tenant id's into test.conf
    # DEMO_TENANT=`get_tenant_id demo`
    # sed -i "s/%reddwarf_tenant_id%/$REDDWARF_TENANT/g" $USERHOME/test.conf
    # sed -i "s/%daffy_tenant_id%/$DAFFY_TENANT/g" $USERHOME/test.conf
    # sed -i "s/%demo_tenant_id%/$DEMO_TENANT/g" $USERHOME/test.conf

    echo "
REDDWARF_TENANT=$REDDWARF_TENANT
REDDWARF_USER=$REDDWARF_USER
REDDWARF_ROLE=$REDDWARF_ROLE
" > $PATH_ENV_CONF

    echo "
# REDDWARF_TENANT=$REDDWARF_TENANT
# REDDWARF_USER=$REDDWARF_USER
# REDDWARF_ROLE=$REDDWARF_ROLE"

    echo "Checking login..."
    # Now attempt a login
    curl -d '{"auth":{"passwordCredentials":{"username": "reddwarf", "password": "REDDWARF-PASS"},"tenantName":"reddwarf"}}' \
     -H "Content-type: application/json" http://$SERVICE_HOST:35357/v2.0/tokens

    # Register reddwarf service.
    SERVICE_UUID=`keystone_manage service-list | grep reddwarf | awk '{print $2}'`
    if [ -z $SERVICE_UUID ]; then
        OS_USERNAME=reddwarf \
        OS_PASSWORD=REDDWARF-PASS \
        OS_AUTH_URL='http://$SERVICE_HOST:8779/v1.0/$(tenant_id)s' \
        keystone_manage service-create --name=reddwarf \
                            --type=database\
                            --description="reddwarf"
        service_id=`keystone --endpoint http://$SERVICE_HOST:35357/v2.0 --token $SERVICE_TOKEN  service-list|grep reddwarf|cut -d'|' -f2`
        tenant_ids='$(tenant_id)s'
        keystone_manage endpoint-create \
               --region RegionOne --service-id $service_id \
               --publicurl "http://$SERVICE_HOST':8779/v1.0/$tenant_ids" \
               --adminurl "http://$SERVICE_HOST:8779/v1.0/$tenant_ids" \
               --internalurl "http://$SERVICE_HOST:8779/v1.0/$tenant_ids"
    fi

}

###############################################################################
# Setup Reddwarf Config file and related functions
###############################################################################

function service_report_log_directory {
    # enable logging for the service when running in CI
    if [ -n "$CI_RUN" ]; then
        sed -i "s/#log_dir/log_dir/" $USERHOME/$1.conf
        sed -i "s/#log_file/log_file/" $USERHOME/$1.conf
        sed -i "s/\/integration\/report/$ESCAPED_REDSTACK_SCRIPTS\/\.\.\/report\//" $USERHOME/$1.conf
    fi
}

function fix_rd_configfile() {
    cd $REDDWARF_DIR
    cp etc/reddwarf/reddwarf.conf.sample $USERHOME/reddwarf.conf
    cp etc/reddwarf/reddwarf-taskmanager.conf.sample $USERHOME/reddwarf-taskmanager.conf

    # Fix the tokens in the conf files
    sed -i "s/f7999d1955c5014aa32c/$RABBIT_PASSWORD/g" $USERHOME/reddwarf.conf
    sed -i "s/f7999d1955c5014aa32c/$RABBIT_PASSWORD/g" $USERHOME/reddwarf-taskmanager.conf
    sed -i "s/e1a2c042c828d3566d0a/$DATABASE_PASSWORD/g" $USERHOME/reddwarf.conf
    sed -i "s/e1a2c042c828d3566d0a/$DATABASE_PASSWORD/g" $USERHOME/reddwarf-taskmanager.conf
    sed -i "s/be19c524ddc92109a224/$SERVICE_TOKEN/g" $USERHOME/reddwarf.conf
    sed -i "s/be19c524ddc92109a224/$SERVICE_TOKEN/g" $USERHOME/reddwarf-taskmanager.conf

    service_report_log_directory reddwarf
    service_report_log_directory reddwarf-taskmanager
}

###############################################################################
# Adding new flavours to nova and related functions
###############################################################################

function add_flavor() {
    local mod="add_flavors"
    msgout "DEBUG" "$mod<-- $FLAVOR_ID ($FLAVOR_NAME), memory=$FLAVOR_MEMORY_MB, root_gb=$FLAVOR_ROOT_GB VCPUS=$5"
    FLAVOR_NAME=$1
    FLAVOR_ID=$2
    FLAVOR_MEMORY_MB=$3
    FLAVOR_ROOT_GB=$4
    FLAVOR_VCPUS=$5

    if [[ -z $(nova flavor-list | grep $FLAVOR_NAME) ]]; then
        nova flavor-create $FLAVOR_NAME $FLAVOR_ID $FLAVOR_MEMORY_MB $FLAVOR_ROOT_GB $FLAVOR_VCPUS
    fi
    msgout "DEBUG" "$mod:-->"
}

function add_flavors() {
    local mod="add_flavors"
    msgout "DEBUG" "$mod<-- "
    # Incredibly useful for testing resize in a VM.
    set +e
    add_flavor 'tinier' 6 506 10 1
    # It can also be useful to have a flavor with 512 megs and a bit of disk space.
    add_flavor 'm1.rd-tiny' 7 512 2 1
    # Its also useful to have a slightly bigger flavor...
    add_flavor 'm1.rd-smaller' 8 768 2 1
    set -e
    msgout "DEBUG" "$mod:-->"
}

###############################################################################
# stack.sh entry points
###############################################################################

# cleanup_reddwarfclient() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_reddwarfclient() {
    local mod="cleanup_reddwarfclient"
    # This function intentionally left blank
    msgout "DEBUG" "$mod:<-- "
    msgout "DEBUG" "$mod:--> "
}

# cleanup_reddwarf() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_reddwarf() {
    local mod="cleanup_reddwarf"
    # This function intentionally left blank
    msgout "DEBUG" "$mod:<-- "
    msgout "DEBUG" "$mod:--> "
}

# configure_reddwarfclient() - Set config files, create data dirs, etc
function configure_reddwarfclient() {
    local mod="configure_reddwarfclient"
    msgout "DEBUG" "$mod<-- "
    setup_develop $REDDWARFCLIENT_DIR
    msgout "DEBUG" "$mod:-->"
}

# configure_reddwarf() - Set config files, create data dirs, etc
function configure_reddwarf() {
    local mod="configure_reddwarf"
    msgout "DEBUG" "$mod<-- ($REDDWARF_DIR)"
    setup_develop $REDDWARF_DIR

    # Create the reddwarf data dir if it doesn't exist
    sudo mkdir -p ${REDDWARF_DATA_DIR}
    sudo chown -R $USER: ${REDDWARF_DATA_DIR}

    create_package_repo
    munge_apache2
    add_dbass_mycnf_to_package_repo

    msgout "DEBUG" "$mod:-->"
}

# install_reddwarfclient() - Collect source and prepare
function install_reddwarfclient() {
    local mod="install_reddwarfclient"
    msgout "DEBUG" "$mod<-- "
    git_clone $REDDWARFCLIENT_REPO $REDDWARFCLIENT_DIR $REDDWARFCLIENT_BRANCH
    msgout "DEBUG" "mod:-->"
}

# install_reddwarf() - Collect source and prepare
function install_reddwarf() {
    local mod="install_reddwarf"
    msgout "DEBUG" "$mod<-- "
    git_clone $REDDWARF_REPO $REDDWARF_DIR $REDDWARF_BRANCH
    msgout "DEBUG" "mod:-->"
}

# init_reddwarf() - Initializes Reddwarf Database as a Service
function init_reddwarf() {
    local mod="init_reddwarf"
    msgout "DEBUG" "$mod<-- "

    msgout "DEBUG" "Creating reddwarf db..."
    mysql_nova "DROP DATABASE IF EXISTS reddwarf;"
    mysql_nova "CREATE DATABASE reddwarf;"

    mkdir -p $PATH_INTEGRATION_CONF

    msgout "DEBUG" "Creating Keystone users..."
    configure_keystone_for_reddwarf

    msgout "DEBUG" "Making a temporary reddwarf config file..."
    fix_rd_configfile

    msgout "DEBUG" "Initializing the Reddwarf Database..."
    rd_manage db_sync

    msgout "DEBUG" "Adding reddwarf specific flavours..."
    add_flavors

    msgout "DEBUG" "mod:-->"
}

# start_reddwarf() - Start running processes, including screen
function start_reddwarf() {
    local mod="start_reddwarf"
    msgout "DEBUG" "$mod<-- "
    screen_it rd-api "cd $REDDWARF_DIR; bin/reddwarf-api --config-file=$USERHOME/reddwarf.conf | tee $USERHOME/reddwarf-api.log"
    screen_it rd-tmgr "cd $REDDWARF_DIR; bin/reddwarf-taskmanager --config-file=$USERHOME/reddwarf-taskmanager.conf | tee $USERHOME/reddwarf-taskmanager.log"
    msgout "DEBUG" "mod:-->"
}

# stop_reddwarf() - Stop running processes
function stop_reddwarf() {
    local mod="stop_reddwarf"
    msgout "DEBUG" "$mod<-- "
    # Kill the reddwarf screen windows
    for serv in rd-api rd-tmgr; do
        screen -S $SCREEN_NAME -p $serv -X kill
    done
    msgout "DEBUG" "mod:-->"
}

# Restore xtrace
$XTRACE
