# lib/ironic
# Functions to control the configuration and operation of the **Ironic** service

# Dependencies:
# ``functions`` file
# ``DEST``, ``DATA_DIR``, ``STACK_USER`` must be defined
# ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# ``SERVICE_HOST``
# ``KEYSTONE_TOKEN_FORMAT`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# install_ironic
# configure_ironic
# init_ironic
# start_ironic
# stop_ironic
# cleanup_ironic

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# Set up default directories
IRONIC_DIR=$DEST/ironic
# Not sure whether there will be a separate client
# for Ironic.
#IRONICCLIENT_DIR=$DEST/python-ironicclient
IRONIC_AUTH_CACHE_DIR=${IRONIC_AUTironic/H_CACHE_DIR:-/var/cache/ironic}

IRONIC_CONF_DIR=${IRONIC_CONF_DIR:-/etc/ironic}
IRONIC_API_CONF=$IRONIC_CONF_DIR/ironic-api.conf
IRONIC_POLICY_JSON=$IRONIC_CONF_DIR/policy.json

# Support entry points installation of console scripts
if [[ -d $IRONIC_DIR/bin ]]; then
    IRONIC_BIN_DIR=$IRONIC_DIR/bin
else
    IRONIC_BIN_DIR=$(get_python_exec_prefix)
fi

# Glance connection info.  Note the port must be specified.
IRONIC_HOSTPORT=${IRONIC_HOSTPORT:-$SERVICE_HOST:6385}


# Functions
# ---------

# cleanup_ironic() - Remove residual data files, anything left over from previous
# runs that would need to clean up.
function cleanup_ironic() {
    sudo rm -rf $IRONIC_AUTH_CACHE_DIR
}

# configure_ironic() - Set config files, create data dirs, etc
function configure_ironic() {
    if [[ ! -d $IRONIC_CONF_DIR ]]; then
        sudo mkdir -p $IRONIC_CONF_DIR
    fi
    sudo chown $STACK_USER $IRONIC_CONF_DIR

    # Copy over ironic configurations and update them
    cp $IRONIC_DIR/etc/ironic/ironic.conf.sample $IRONIC_API_CONF
    iniset $IRONIC_API_CONF DEFAULT debug True
    inicomment $IRONIC_API_CONF DEFAULT log_file
    iniset $IRONIC_API_CONF DEFAULT sql_connection $dburl
    iniset $IRONIC_API_CONF DEFAULT use_syslog $SYSLOG
    iniset $IRONIC_API_CONF keystone_authtoken auth_host $KEYSTONE_AUTH_HOST
    iniset $IRONIC_API_CONF keystone_authtoken auth_port $KEYSTONE_AUTH_PORT
    iniset $IRONIC_API_CONF keystone_authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $IRONIC_API_CONF keystone_authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_SERVICE_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $IRONIC_API_CONF keystone_authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $IRONIC_API_CONF keystone_authtoken admin_user ironic
    iniset $IRONIC_API_CONF keystone_authtoken admin_password $SERVICE_PASSWORD
    if is_service_enabled qpid; then
        iniset $IRONIC_API_CONF DEFAULT notifier_strategy qpid
    elif [ -n "$RABBIT_HOST" ] &&  [ -n "$RABBIT_PASSWORD" ]; then
        iniset $IRONIC_API_CONF DEFAULT notifier_strategy rabbit
    fi
    iniset_rpc_backend ironic $IRONIC_API_CONF DEFAULT
    iniset $IRONIC_API_CONF keystone_authtoken signing_dir $IRONIC_AUTH_CACHE_DIR/api

    cp -p $IRONIC_DIR/etc/ironic/policy.json $IRONIC_POLICY_JSON
}

# create_ironic_cache_dir() - Part of the init_ironic() process
function create_ironic_cache_dir() {
    # Create cache dir
    sudo mkdir -p $IRONIC_AUTH_CACHE_DIR/api
    sudo chown $STACK_USER $IRONIC_AUTH_CACHE_DIR/api
    rm -f $IRONIC_AUTH_CACHE_DIR/api/*
    sudo mkdir -p $IRONIC_AUTH_CACHE_DIR/registry
    sudo chown $STACK_USER $IRONIC_AUTH_CACHE_DIR/registry
    rm -f $IRONIC_AUTH_CACHE_DIR/registry/*
}

# init_ironic() - Initialize databases, etc.
function init_ironic() {
    # (Re)create  ironic database
    recreate_database ironic utf8

    # Migrate ironic database
    $IRONIC_BIN_DIR/ironic-dbsync

    create_ironic_cache_dir
}

# TODO(romcheg): Not sure we will have a separate client for Ironic.
# # install_ironicclient() - Collect source and prepare
# function install_ironicclient() {
#     git_clone $IRONICCLIENT_REPO $IRONICCLIENT_DIR $IRONICCLIENT_BRANCH
#     setup_develop $IRONICCLIENT_DIR
# }

# install_ironic() - Collect source and prepare
function install_ironic() {
    git_clone $IRONIC_REPO $IRONIC_DIR $IRONIC_BRANCH
    setup_develop $IRONIC_DIR
}

# start_ironic() - Start running processes, including screen
function start_ironic() {
    screen_it ir-api "cd $IRONIC_DIR; $IRONIC_BIN_DIR/ironic-api --config-file=$IRONIC_CONF_DIR/ironic-api.conf"
    echo "Waiting for ir-api ($IRONIC_HOSTPORT) to start..."
    if ! timeout $SERVICE_TIMEOUT sh -c "while ! http_proxy= wget -q -O- http://$IRONIC_HOSTPORT; do sleep 1; done"; then
      die $LINENO "ir-api did not start"
    fi
}

# stop_ironic() - Stop running processes
function stop_ironic() {
    # Kill the Ironic screen windows
    screen -S $SCREEN_NAME -p ir-api -X kill
}


# Restore xtrace
$XTRACE

# Local variables:
# mode: shell-script
# End:
