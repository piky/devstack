# lib/dib
# Install and build images with **diskimage-builder**

# Dependencies:
#
# - functions
# - DEST, DATA_DIR must be defined

# stack.sh
# ---------
# - install_dib

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------

# set up default directories
GITDIR["diskimage-builder"]=$DEST/diskimage-builder
GITDIR["tripleo-image-elements"]=$DEST/tripleo-image-elements
GITDIR["os-collect-config"]=$DEST/os-collect-config
GITDIR["os-refresh-config"]=$DEST/os-refresh-config
GITDIR["os-apply-config"]=$DEST/os-apply-config

# NOTE: Setting DIB_APT_SOURCES assumes you will be building
# Debian/Ubuntu based images. Leave unset for other flavors.
DIB_APT_SOURCES=${DIB_APT_SOURCES:-""}
DIB_BUILD_OFFLINE=$(trueorfalse False $DIB_BUILD_OFFLINE)
DIB_IMAGE_CACHE=$DATA_DIR/diskimage-builder/image-create
DIB_PIP_REPO=$DATA_DIR/diskimage-builder/pip-repo
DIB_PIP_REPO_PORT=${DIB_PIP_REPO_PORT:-8899}
DIB_PYPI_MIRROR_URL=${DIB_PYPI_MIRROR_URL:-http://$SERVICE_HOST:$DIB_PIP_REPO_PORT/}

if [ -a $HOME/.pip/pip.conf ]; then
    # Add the current pip.conf index-url as an extra-index-url
    # in the image build
    DIB_PYPI_MIRROR_URL_1=$(iniget $HOME/.pip/pip.conf global index-url)
else
    DIB_PYPI_MIRROR_URL_1=${DIB_PYPI_MIRROR_URL_1:-http://pypi.python.org/simple}
fi

# Include the apt-sources element in builds if we have an
# alternative sources.list specified.
if [ -n "$DIB_APT_SOURCES" ]; then
    if [ ! -e "$DIB_APT_SOURCES" ]; then
        die $LINENO "DIB_APT_SOURCES set but not found at $DIB_APT_SOURCES"
    fi
    EXTRA_ELEMENTS="apt-sources"
fi



# Functions
# ---------

# install_dib() - Collect source and prepare
function install_dib {
    for lib in diskimage-builder tripleo-image-elements os-collect-config os-refresh-config os-apply-config; do
        if use_library_from_git "$lib"; then
            git_clone_by_name "$lib"
            setup_lib "$lib"
        else
            pip_install "$lib"
        fi
    done
    mkdir -p $DIB_IMAGE_CACHE
}

# build_dib_pip_repo() - Builds a local pip repo from local projects
function build_dib_pip_repo {
    local project_dirs=$1
    local projpath proj package

    rm -rf $DIB_PIP_REPO
    mkdir -p $DIB_PIP_REPO

    echo "<html><body>" > $DIB_PIP_REPO/index.html
    for projpath in $project_dirs; do
        proj=$(basename $projpath)
        mkdir -p $DIB_PIP_REPO/$proj
        pushd $projpath
        rm -rf dist
        python setup.py sdist
        pushd dist
        package=$(ls *)
        mv $package $DIB_PIP_REPO/$proj/$package
        popd

        echo "<html><body><a href=\"$package\">$package</a></body></html>" > $DIB_PIP_REPO/$proj/index.html
        echo "<a href=\"$proj\">$proj</a><br/>" >> $DIB_PIP_REPO/index.html

        popd
    done

    echo "</body></html>" >> $DIB_PIP_REPO/index.html

    local dib_pip_repo_apache_conf=$(apache_site_config_for dib_pip_repo)

    sudo cp $FILES/apache-dib-pip-repo.template $dib_pip_repo_apache_conf
    sudo sed -e "
        s|%DIB_PIP_REPO%|$DIB_PIP_REPO|g;
        s|%DIB_PIP_REPO_PORT%|$DIB_PIP_REPO_PORT|g;
        s|%APACHE_NAME%|$APACHE_NAME|g;
    " -i $dib_pip_repo_apache_conf
    enable_apache_site dib_pip_repo
}

# disk_image_create_upload() - Creates and uploads a diskimage-builder built image
function disk_image_create_upload {

    local image_name=$1
    local image_elements=$2
    local elements_path=$3

    local image_path=$TOP_DIR/files/$image_name.qcow2

    # The disk-image-create command to run
    ELEMENTS_PATH=$elements_path \
    DIB_APT_SOURCES=$DIB_APT_SOURCES \
    DIB_OFFLINE=$DIB_BUILD_OFFLINE \
    PYPI_MIRROR_URL=$DIB_PYPI_MIRROR_URL \
    PYPI_MIRROR_URL_1=$DIB_PYPI_MIRROR_URL_1 \
    disk-image-create -a amd64 $image_elements $EXTRA_ELEMENTS \
        --image-cache $DIB_IMAGE_CACHE \
        -o $image_path

    local token=$(keystone token-get | grep ' id ' | get_field 2)
    die_if_not_set $LINENO token "Keystone fail to get token"

    glance --os-auth-token $token --os-image-url http://$GLANCE_HOSTPORT \
        image-create --name $image_name --is-public True \
        --container-format=bare --disk-format qcow2 \
        < $image_path
}

# ramdisk_image_create() - Creates a ramdisk and kernel.  Note, this call
# outputs two files in $TOP_DIR/files/, $image_name.initramfs and
# $image_name.kernel.
function ramdisk_image_create {
    local image_name=$1
    local image_elements=$2
    local elements_path=$3

    local image_path=$TOP_DIR/files/$image_name

    ELEMENTS_PATH=$elements_path \
    PYPI_MIRROR_URL=$DIB_PYPI_MIRROR_URL \
    PYPI_MIRROR_URL_1=$DIB_PYPI_MIRROR_URL_1 \
    DIB_OFFLINE=$DIB_BUILD_OFFLINE \
    DIB_APT_SOURCES=$DIB_APT_SOURCES \
    ramdisk-image-create -a amd64 $image_elements $EXTRA_ELEMENTS -a amd64 \
        --image-cache $DIB_IMAGE_CACHE -o $image_path
}

# Restore xtrace
$XTRACE

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
