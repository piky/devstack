#!/bin/bash
#
# lib/placement
# Functions to control the configuration and operation of the **Placement** service

# Dependencies:
#
# - ``functions`` file
# - ``DEST``, ``DATA_DIR``, ``STACK_USER`` must be defined
# - ``FILES``

# ``stack.sh`` calls the entry points in this order:
#
# - install_placement
# - configure_placment
# - _config_placement_apache_wsgi
# - create_placement_conf
# - init_placement
# - start_placement
# - stop_placement
# - cleanup_placement

# Save trace setting
_XTRACE_LIB_PLACEMENT=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

PLACEMENT_CONF_DIR=/etc/placement
PLACEMENT_CONF=$PLACEMENT_CONF_DIR/placement.conf
PLACEMENT_AUTH_CACHE_DIR=${PLACEMENT_AUTH_CACHE_DIR:-/var/cache/placement}

if is_suse; then
    PLACEMENT_WSGI_DIR=${PLACEMENT_WSGI_DIR:-/srv/www/htdocs/placement}
else
    PLACEMENT_WSGI_DIR=${PLACEMENT_WSGI_DIR:-/var/www/placement}
fi

if is_ssl_enabled_service "placement" || is_service_enabled tls-proxy; then
    PLACEMENT_SERVICE_PROTOCOL="https"
fi

# Public facing bits
PLACEMENT_SERVICE_PROTOCOL=${PLACEMENT_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}
PLACEMENT_SERVICE_HOST=${PLACEMENT_SERVICE_HOST:-$SERVICE_HOST}
PLACEMENT_SERVICE_PORT=${PLACEMENT_SERVICE_PORT:-8778}

# Functions
# ---------

# Test if any placement services are enabled
# is_placement_enabled
function is_placement_enabled {
    [[ ,${ENABLED_SERVICES} =~ ,"placement-" ]] && return 0
    return 1
}


# cleanup_placement() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_placement {
    sudo rm -f $(apache_site_config_for placement-api)
}

# _config_placement_apache_wsgi() - Set WSGI config files
function _config_placement_apache_wsgi {
    sudo mkdir -p $PLACEMENT_WSGI_DIR

    local placement_api_apache_conf
    placement_api_apache_conf=$(apache_site_config_for placement-api)
    local placement_api_port=$PLACEMENT_SERVICE_PORT
    local venv_path=""

    # reuse nova's cert if a cert is being sued
    if is_ssl_enabled_service placement-api; then
        nova_ssl="SSLEngine On"
        nova_certfile="SSLCertificateFile $NOVA_SSL_CERT"
        nova_keyfile="SSLCertificateKeyFile $NOVA_SSL_KEY"
    fi
    if [[ ${USE_VENV} = True ]]; then
        venv_path="python-path=${PROJECT_VENV["nova"]}/lib/$(python_version)/site-packages"
    fi

    # copy proxy vhost and wsgi helper files
    sudo cp $NOVA_DIR/nova/api/openstack/placement/placement-api.py $PLACEMENT_WSGI_DIR/placement-api

    sudo cp $FILES/apache-placement-api.template $placement_api_apache_conf
    sudo sed -e "
        s|%PUBLICPORT%|$placement_api_port|g;
        s|%APACHE_NAME%|$APACHE_NAME|g;
        s|%PUBLICWSGI%|$PLACEMENT_WSGI_DIR/placement-api|g;
        s|%SSLENGINE%|$nova_ssl|g;
        s|%SSLCERTFILE%|$nova_certfile|g;
        s|%SSLKEYFILE%|$nova_keyfile|g;
        s|%USER%|$STACK_USER|g;
        s|%VIRTUALENV%|$venv_path|g
        s|%APIWORKERS%|$API_WORKERS|g
    " -i $placement_api_apache_conf
}

# configure_placement() - Set config files, create data dirs, etc
function configure_placement {
    sudo install -d -o $STACK_USER $PLACEMENT_CONF_DIR

    #install_default_policy placement

    cp $NOVA_DIR/etc/placement/api-paste.ini $PLACEMENT_CONF_DIR

    # Rebuild the config file from scratch
    create_placement_conf
}

# create_placement_accounts() - Set up common required nova accounts
#
# Project              User         Roles
# ------------------------------------------------------------------
# SERVICE_PROJECT_NAME  nova         admin
# SERVICE_PROJECT_NAME  nova         ResellerAdmin (if Swift is enabled)
function create_placement_accounts {

    create_service_user "placement"
    local placement_api_url="$PLACEMENT_SERVICE_PROTOCOL://$PLACEMENT_SERVICE_HOST/placement"
    get_or_create_service "placement" "placement" "Placement Service"
    get_or_create_endpoint \
        "placement" \
        "$REGION_NAME" \
        "$placement_api_url" \
        "$placement_api_url" \
        "$placement_api_url"

}

# create_placement_conf() - Create a new placement.conf file
function create_placement_conf {
    # (Re)create ``placement.conf``
    rm -f $PLACEMENT_CONF
    iniset $PLACEMENT_CONF DEFAULT debug "$ENABLE_DEBUG_LOG_LEVEL"
    iniset $PLACEMENT_CONF database connection `database_connection_url placement`

    configure_auth_token_middleware $PLACEMENT_CONF placement $PLACEMENT_AUTH_CACHE_DIR

    _config_placement_apache_wsgi

}


# create_placement_cache_dir() - Part of the init_placement() process
function create_placement_cache_dir {
    # Create cache dir
    sudo install -d -m 0700 -o $STACK_USER $PLACEMENT_AUTH_CACHE_DIR
    rm -f $PLACEMENT_AUTH_CACHE_DIR/*
}

# init_placement() - Initialize databases, etc.
# TODO(cdent): For now nova paths are used here as we might be in
# its virtualenv.
function init_placement {
    # (Re)create placement database
    recreate_database placement

    # Migrate placement database
    $NOVA_BIN_DIR/placement-manage --config-file $PLACEMENT_CONF db sync

    # Run online migrations on the new databases
    # NOTE(cdent): There are none, yet.
    #$NOVA_BIN_DIR/placement-manage --config-file $PLACEMENT_CONF db online_data_migrations

    create_placement_accounts
    create_placement_cache_dir
}

# install_placement() - Collect source and prepare
function install_placement {
    install_apache_wsgi
    if is_ssl_enabled_service "placement-api"; then
        enable_mod_ssl
    fi
}

# start_placement_api() - Start the API processes ahead of other things
function start_placement_api {
    # Get right service port for testing
    local service_port=$PLACEMENT_SERVICE_PORT
    local placement_api_port=$PLACEMENT_SERVICE_PORT

    enable_apache_site placement-api
    restart_apache_server
    tail_log placement-api /var/log/$APACHE_NAME/placement-api.log

    echo "Waiting for placement-api to start..."
    if ! wait_for_service $SERVICE_TIMEOUT $PLACEMENT_SERVICE_PROTOCOL://$PLACEMENT_SERVICE_HOST/placement; then
        die $LINENO "placement-api did not start"
    fi
}


function start_placement {
    start_placement_api
}

function stop_placement_rest {
    disable_apache_site placement-api
    restart_apache_server
}

# stop_placement() - Stop running processes (non-screen)
function stop_placement {
    stop_placement_rest
}

# Restore xtrace
$_XTRACE_LIB_PLACEMENT

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
