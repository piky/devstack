# lib/infra
#
# Functions to install infrastructure projects needed by other projects
# early in the cycle. We need this so we can do things like gate on
# requirements as a global list

# Dependencies:
# ``functions`` file

# ``stack.sh`` calls the entry points in this order:
#
# unfubar_setuptools
# install_infra

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------
PBR_DIR=$DEST/pbr
REQUIREMENTS_DIR=$DEST/requirements

# Entry Points
# ------------

# standardize_setuptools() - Unbreak the giant mess that is the
# current state of setuptools
function standardize_setuptools() {

    if is_fedora; then
	# Pip on fedora/rhel installs to /usr rather than /usr/local,
	# so using the packaged pip to install a new pip overwrites
	# the packaged one rather than creating a parallel version.
	# This leads to a broken mess.

	# Thus we build and install a dummy package to remove the
	# existing setuptools, pip and some other rpm packages we want
	# to replace from upstream pip (e.g. crypto/lxml).  Dummy
	# package means code is removed but we don't have to remove
	# the rpms and break dependencies.  Obviously the system is
	# broken till those dependencies are installed again, but we
	# can live with that.
	. ${TOP_DIR}/tools/build_dummy_rpm.sh

	# now install "one true version" from upstream
	. ${TOP_DIR}/tools/install_pip.sh
    else
        # this is a giant game of who's on first, but it does consistently work
        # there is hope that upstream python packaging fixes this in the future
	echo_summary "Unbreaking setuptools"
	pip_install -U setuptools
	pip_install -U pip
	uninstall_package python-setuptools
	pip_install -U setuptools
	pip_install -U pip
    fi
}


# install_infra() - Collect source and prepare
function install_infra() {
    # bring down global requirements
    git_clone $REQUIREMENTS_REPO $REQUIREMENTS_DIR $REQUIREMENTS_BRANCH

    # Install pbr
    git_clone $PBR_REPO $PBR_DIR $PBR_BRANCH
    setup_develop $PBR_DIR
}

# Restore xtrace
$XTRACE

# Local variables:
# mode: shell-script
# End:
