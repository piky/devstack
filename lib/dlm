#!/bin/bash
#
# lib/dlm
#
# Functions to control the installation and configuration of software
# that provides a dlm (and possibly other functions). The default is
# **zookeeper**, and is going to be the only backend supported in the
# devstack tree.

# Dependencies:
#
# - ``functions`` file

# ``stack.sh`` calls the entry points in this order:
#
# - is_dlm_enabled
# - install_dlm
# - configure_dlm
# - cleanup_dlm

# Save trace setting
_XTRACE_DLM=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# <define global variables here that belong to this project>
DLM_BACKEND=${DLM_BACKEND:"file"}

# Set up default values for etcd
ETCD_VERSION=${ETCD_VERSION:-v3.0.15}
OVERRIDE_FILE=$DEST/data/etcd.override

# Set up default values for zookeeper
ZOOKEEPER_DATA_DIR=$DEST/data/zookeeper
ZOOKEEPER_CONF_DIR=/etc/zookeeper

if is_ubuntu ; then
    UBUNTU_RELEASE_BASE_NUM=`lsb_release -r | awk '{print $2}' | cut -d '.' -f 1`
fi

# Backend specific methods
# ------------------------

function install_etcd {
    echo "Installing etcd"
    if [ ! -f "$DEST/etcd/etcd-$ETCD_VERSION-linux-amd64/etcd" ]; then
        mkdir -p $DEST/etcd
        wget https://github.com/coreos/etcd/releases/download/$ETCD_VERSION/etcd-$ETCD_VERSION-linux-amd64.tar.gz -O $DEST/etcd/etcd-$ETCD_VERSION-linux-amd64.tar.gz
        tar xzvf $DEST/etcd/etcd-$ETCD_VERSION-linux-amd64.tar.gz -C $DEST/etcd
        sudo cp $DEST/etcd/etcd-$ETCD_VERSION-linux-amd64/etcd /usr/local/bin/etcd
    fi
    if [ ! -f "/usr/local/bin/etcd" ]; then
        sudo cp $DEST/etcd/etcd-$ETCD_VERSION-linux-amd64/etcd /usr/local/bin/etcd
    fi
}

function configure_etcd {
    if is_ubuntu; then
        if [ $UBUNTU_RELEASE_BASE_NUM -ge 16 ] ; then
            _configure_etcd_systemd_service
        else
            _configure_etcd
        fi
    elif is_fedora; then
        _configure_etcd_systemd_service
    fi
}

function _configure_etcd_systemd_service {
    ETCD_CONF_DIR=/etc/etcd
    ETCD_CONF=$ETCD_CONF_DIR/etcd.conf
    ETCD_DATA_DIR="/var/lib/etcd"
    sudo mkdir -p $ETCD_DATA_DIR
    sudo install -d -o $STACK_USER $ETCD_CONF_DIR
    cp $FILES/etcd/etcd.service.conf $ETCD_CONF

    iniset $ETCD_CONF DEFAULT ETCD_INITIAL_CLUSTER "$HOSTNAME=http://$REMOTE_DB_IP:2380"
    iniset $ETCD_CONF DEFAULT ETCD_INITIAL_CLUSTER_STATE "new"
    iniset $ETCD_CONF DEFAULT ETCD_INITIAL_CLUSTER_TOKEN "etcd-cluster-01"
    iniset $ETCD_CONF DEFAULT ETCD_INITIAL_ADVERTISE_PEER_URLS "http://$REMOTE_DB_IP:2380"
    iniset $ETCD_CONF DEFAULT ETCD_DATA_DIR "$ETCD_DATA_DIR"
    iniset $ETCD_CONF DEFAULT ETCD_LISTEN_PEER_URLS "http://0.0.0.0:2380"
    iniset $ETCD_CONF DEFAULT ETCD_LISTEN_CLIENT_URLS "http://$REMOTE_DB_IP:2379"
    iniset $ETCD_CONF DEFAULT ETCD_ADVERTISE_CLIENT_URLS "http://$REMOTE_DB_IP:2379"
    iniset $ETCD_CONF DEFAULT ETCD_NAME "$HOSTNAME"

    sudo cp $FILES/etcd/etcd.service /lib/systemd/system/
    enable_service etcd
}

function _configure_etcd {
    sudo cp $FILES/etcd/etcd.conf /etc/init/etcd.conf

cat <<EOF > $OVERRIDE_FILE
# Override file for etcd Upstart script providing some environment variables
env ETCD_INITIAL_CLUSTER="$HOSTNAME=http://$REMOTE_DB_IP:2380"
env ETCD_INITIAL_CLUSTER_STATE="new"
env ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
env ETCD_INITIAL_ADVERTISE_PEER_URLS="http://$REMOTE_DB_IP:2380"
env ETCD_DATA_DIR="/var/etcd"
env ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
env ETCD_LISTEN_CLIENT_URLS="http://$REMOTE_DB_IP:2379"
env ETCD_ADVERTISE_CLIENT_URLS="http://$REMOTE_DB_IP:2379"
env ETCD_NAME="$HOSTNAME"
EOF

    sudo cp $OVERRIDE_FILE /etc/init/etcd.override
}

function cleanup_etcd {
    # NOTE(sdague): we don't check for is_enabled here because we
    # should just delete this regardless. Some times users updated
    # their service list before they run cleanup.
    sudo rm -rf $ETCD_DATA_DIR
    sudo rm -rf $ETCD_CONF_DIR
    sudo rm -rf /var/etcd
    sudo rm -f $OVERRIDE_FILE
    sudo rm /lib/systemd/system/etcd.service
    sudo rm /usr/local/bin/etcd
}

function install_zookeeper {
    pip_install_gr_extras zookeeper
    if is_ubuntu; then
        install_package zookeeperd
    elif is_fedora; then
        install_package zookeeper
    else
        die $LINENO "Don't know how to install zookeeper on this platform"
    fi
}

function configure_zookeeper {
    sudo cp $FILES/zookeeper/* $ZOOKEEPER_CONF_DIR
    sudo sed -i -e 's|.*dataDir.*|dataDir='$ZOOKEEPER_DATA_DIR'|' $ZOOKEEPER_CONF_DIR/zoo.cfg
    # clean up from previous (possibly aborted) runs
    # create required data files
    sudo rm -rf $ZOOKEEPER_DATA_DIR
    sudo mkdir -p $ZOOKEEPER_DATA_DIR
}

function cleanup_zookeeper {
    # NOTE(sdague): we don't check for is_enabled here because we
    # should just delete this regardless. Some times users updated
    # their service list before they run cleanup.
    sudo rm -rf $ZOOKEEPER_DATA_DIR
}

# Entry Points
# ------------
#
# NOTE(sdague): it is expected that when someone wants to implement
# another one of these out of tree, they'll implement the following
# functions:
#
# - dlm_backend
# - install_dlm
# - configure_dlm
# - cleanup_dlm

# Get the tooz/coordination url
function dlm_backend_url {
    local comp="$1"
    if [[ ${DLM_BACKEND} == "etcd" ]]; then
        echo "etcd://${SERVICE_HOST}:2379"
    elif [[ ${DLM_BACKEND} == "zookeeper" ]]; then
        echo "zookeeper://${SERVICE_HOST}:2181"
    elif [[ ${DLM_BACKEND} == "file" ]]; then
        echo "file://$DATA_DIR/$comp"
    else
        die $LINENO "DLM_BACKEND ${DLM_BACKEND} is not supported"
    fi
}

# install_dlm() - Collect source and prepare
function install_dlm {
    pip_install_gr_extras tooz
    if [[ ${DLM_BACKEND} == "etcd" ]]; then
        install_etcd
    elif [[ ${DLM_BACKEND} == "zookeeper" ]]; then
        install_zookeeper
    fi
}

# configure_dlm() - Set config files, create data dirs, etc
function configure_dlm {
    # restart after configuration, there is no reason to make this
    # another step, because having data files that don't match the
    # zookeeper running is just going to cause tears.
    if [[ ${DLM_BACKEND} == "etcd" ]]; then
        configure_etcd
        restart_service etcd
    elif [[ ${DLM_BACKEND} == "zookeeper" ]]; then
        configure_zookeeper
        restart_service zookeeper
    fi
}

# cleanup_dlm() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_dlm {
    if [[ ${DLM_BACKEND} == "etcd" ]]; then
        cleanup_etcd
    elif [[ ${DLM_BACKEND} == "zookeeper" ]]; then
        cleanup_zookeeper
    fi
}

# Restore xtrace
$_XTRACE_DLM

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
