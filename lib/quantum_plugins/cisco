# Quantum Cisco plugin
# ---------------------------

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace

function _prefix_function() {
    declare -F $1 > /dev/null || die "$1 doesn't exist"
    eval "$(echo "${2}_${1}()"; declare -f ${1} | tail -n +2)"
}

function _has_ovs_subplugin() {
    local p
    for (( p=0; $p < ${#Q_CISCO_PLUGIN_SUBPLUGINS[@]}; p+=1 )); do
        if [[ "${Q_CISCO_PLUGIN_SUBPLUGINS[$p]}" == "openvswitch" ]]; then
            return 0
        fi
    done
    return 1
}

function _has_nexus_subplugin() {
    local p
    for (( p=0; $p < ${#Q_CISCO_PLUGIN_SUBPLUGINS[@]}; p+=1 )); do
        if [[ "${Q_CISCO_PLUGIN_SUBPLUGINS[$p]}" == "nexus" ]]; then
            return 0
        fi
    done
    return 1
}

function _has_n1kv_subplugin() {
    local p
    for (( p=0; $p < ${#Q_CISCO_PLUGIN_SUBPLUGINS[@]}; p+=1 )); do
        if [[ "${Q_CISCO_PLUGIN_SUBPLUGINS[$p]}" == "n1kv" ]]; then
            return 0
        fi
    done
    return 1
}

function _config_switch() {
    local cisco_cfg_file=$1
    local switch_ip=$2
    local username=$3
    local password=$4
    local ssh_port=$5
    shift 5

    local section="NEXUS_SWITCH:$switch_ip"
    iniset $cisco_cfg_file $section username $username
    iniset $cisco_cfg_file $section password $password
    iniset $cisco_cfg_file $section ssh_port $ssh_port

    while [[ ${#@} != 0 ]]; do
        iniset  $cisco_cfg_file $section $1 $2
        shift 2
    done
}

source $TOP_DIR/lib/quantum_plugins/openvswitch
_prefix_function quantum_plugin_create_nova_conf ovs 
_prefix_function quantum_plugin_install_agent_packages ovs
_prefix_function quantum_plugin_configure_common ovs
_prefix_function quantum_plugin_configure_debug_command ovs
_prefix_function quantum_plugin_configure_dhcp_agent ovs
_prefix_function quantum_plugin_configure_l3_agent ovs
_prefix_function quantum_plugin_configure_plugin_agent ovs
_prefix_function quantum_plugin_configure_service ovs
_prefix_function quantum_plugin_setup_interface_driver ovs

function is_quantum_ovs_base_plugin() {
    # Cisco uses OVS
    return _has_ovs_subplugin
}

function quantum_plugin_create_nova_conf() {
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_create_nova_conf
    fi
}

function quantum_plugin_install_agent_packages() {
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_install_agent_packages
    fi
}

function quantum_plugin_configure_common() {
    # setup default subplugins
    if [ ! -v Q_CISCO_PLUGIN_SUBPLUGINS ]; then
        declare -ga Q_CISCO_PLUGIN_SUBPLUGINS
        Q_CISCO_PLUGIN_SUBPLUGINS=(openvswitch nexus)
    fi
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_configure_common
        Q_PLUGIN_ADDITIONAL_CONF_PATH=etc/quantum/plugins/cisco
        Q_PLUGIN_ADDITIONAL_CONF_FILENAMES=(cisco_plugins.ini) 
    else 
        Q_PLUGIN_CONF_PATH=etc/quantum/plugins/cisco
        Q_PLUGIN_CONF_FILENAME=cisco_plugins.ini 
    fi
    Q_PLUGIN_CLASS="quantum.plugins.cisco.network_plugin.PluginV2"
}

function quantum_plugin_configure_debug_command() {
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_configure_debug_command
    fi
}

function quantum_plugin_configure_dhcp_agent() {
    iniset $Q_DHCP_CONF_FILE DEFAULT dhcp_agent_manager quantum.agent.dhcp_agent.DhcpAgentWithStateReport
}

function quantum_plugin_configure_l3_agent() {
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_configure_l3_agent
    fi
}

function quantum_plugin_configure_plugin_agent() {
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_configure_plugin_agent
    fi
}

function quantum_plugin_configure_service() {
    local p
    local cisco_cfg_file
    if _has_ovs_subplugin; then
        ovs_quantum_plugin_configure_service
        cisco_cfg_file=/${Q_PLUGIN_ADDITIONAL_CONF_FILES[0]}
    else
        cisco_cfg_file=/$Q_PLUGIN_CONF_FILE
    fi

    # Setup the [CISCO_PLUGINS] section
    for (( p=0; $p < ${#Q_CISCO_PLUGIN_SUBPLUGINS[@]}; p+=1 )); do
        case ${Q_CISCO_PLUGIN_SUBPLUGINS[$p]} in
            nexus) iniset $cisco_cfg_file CISCO_PLUGINS nexus_plugin quantum.plugins.cisco.nexus.cisco_nexus_plugin_v2.NexusPlugin;;
            openvswitch) iniset $cisco_cfg_file CISCO_PLUGINS vswitch_plugin quantum.plugins.openvswitch.ovs_quantum_plugin.OVSQuantumPluginV2;;
            *) die $LINENO "unsupported cisco subplugin: ${Q_CISCO_PLUGIN_SUBPLUGINS[$p]}";;
        esac
    done

    # Setup the [CISCO] section
    iniset $cisco_cfg_file CISCO keystone_username admin
    iniset $cisco_cfg_file CISCO keystone_password "$ADMIN_PASSWORD"
    iniset $cisco_cfg_file CISCO keystone_auth_url "$KEYSTONE_AUTH_PROTOCOL://$SERVICE_HOST:$KEYSTONE_SERVICE_PORT/v2.0/"

    if _has_nexus_subplugin; then
        inicomment $cisco_cfg_file CISCO testhost
        # Setup default nexus switch information
        if [ ! -v Q_CISCO_PLUGIN_SWITCH_INFO ]; then
            declare -A Q_CISCO_PLUGIN_SWITCH_INFO
            HOST_NAME=$(hostname)
            Q_CISCO_PLUGIN_SWITCH_INFO=([1.1.1.1]=stack:stack:22:${HOST_NAME}:1/10)
        fi
        # Setup the switch configurations
        local nswitch
        local sw_info
        local segment
        declare -i count=0
        for nswitch in ${!Q_CISCO_PLUGIN_SWITCH_INFO[@]}; do
            sw_info=${Q_CISCO_PLUGIN_SWITCH_INFO[$nswitch]}
            sw_info=${sw_info//:/ }
            sw_info=( $sw_info )
            count=${#sw_info[@]}
            if [[ $count < 5 || $(( ($count-3) % 2 )) != 0 ]]; then
                die $LINENO "Incorrect switch configuration: ${Q_CISCO_PLUGIN_SWITCH_INFO[$nswitch]}"
            fi
            _config_switch $cisco_cfg_file $nswitch ${sw_info[@]}
        done
    fi
}

function quantum_plugin_setup_interface_driver() {
    local conf_file=$1
    iniset $conf_file DEFAULT interface_driver quantum.agent.linux.interface.OVSInterfaceDriver
}

# Restore xtrace
$MY_XTRACE
